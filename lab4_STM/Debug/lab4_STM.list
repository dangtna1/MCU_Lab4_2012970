
lab4_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e38  08002e38  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002e38  08002e38  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e38  08002e38  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e3c  08002e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000078  08002eb8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08002eb8  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4f6  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eff  00000000  00000000  0002c597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  0002e498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000033b8  00000000  00000000  0002f0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ccd5  00000000  00000000  000324a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00088a62  00000000  00000000  0003f175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000c7bd7  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b70  00000000  00000000  000c7c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003620  00000000  00000000  000c87a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002dac 	.word	0x08002dac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002dac 	.word	0x08002dac

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd07 	bl	8000b64 <HAL_Init>

  /* USER CODE BEGIN Init */
  SCH_Init();
 8000156:	f000 f9e3 	bl	8000520 <SCH_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f863 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f913 	bl	8000388 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000162:	f000 f89b 	bl	800029c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000166:	f000 f8e5 	bl	8000334 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800016a:	4825      	ldr	r0, [pc, #148]	; (8000200 <main+0xb4>)
 800016c:	f001 fc66 	bl	8001a3c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int task1Index = SCH_Add_Task(task1, 100, 500);
 8000170:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000174:	2164      	movs	r1, #100	; 0x64
 8000176:	4823      	ldr	r0, [pc, #140]	; (8000204 <main+0xb8>)
 8000178:	f000 f9ea 	bl	8000550 <SCH_Add_Task>
 800017c:	4603      	mov	r3, r0
 800017e:	617b      	str	r3, [r7, #20]
  int task2Index = SCH_Add_Task(task2, 200, 500);
 8000180:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000184:	21c8      	movs	r1, #200	; 0xc8
 8000186:	4820      	ldr	r0, [pc, #128]	; (8000208 <main+0xbc>)
 8000188:	f000 f9e2 	bl	8000550 <SCH_Add_Task>
 800018c:	4603      	mov	r3, r0
 800018e:	613b      	str	r3, [r7, #16]
  int task3Index = SCH_Add_Task(task3, 300, 500);
 8000190:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000194:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000198:	481c      	ldr	r0, [pc, #112]	; (800020c <main+0xc0>)
 800019a:	f000 f9d9 	bl	8000550 <SCH_Add_Task>
 800019e:	4603      	mov	r3, r0
 80001a0:	60fb      	str	r3, [r7, #12]
  int task4Index = SCH_Add_Task(task4, 400, 500);
 80001a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001a6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80001aa:	4819      	ldr	r0, [pc, #100]	; (8000210 <main+0xc4>)
 80001ac:	f000 f9d0 	bl	8000550 <SCH_Add_Task>
 80001b0:	4603      	mov	r3, r0
 80001b2:	60bb      	str	r3, [r7, #8]
  int task5Index = SCH_Add_Task(task5, 500, 0); //one-shot task
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80001ba:	4816      	ldr	r0, [pc, #88]	; (8000214 <main+0xc8>)
 80001bc:	f000 f9c8 	bl	8000550 <SCH_Add_Task>
 80001c0:	4603      	mov	r3, r0
 80001c2:	607b      	str	r3, [r7, #4]

  setTimer1(1000);
 80001c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c8:	f000 fac0 	bl	800074c <setTimer1>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 80001cc:	f000 fa72 	bl	80006b4 <SCH_Dispatch_Tasks>
	  if (timer1_flag == 1) {
 80001d0:	4b11      	ldr	r3, [pc, #68]	; (8000218 <main+0xcc>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d1f9      	bne.n	80001cc <main+0x80>
		  setTimer1(1000);
 80001d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001dc:	f000 fab6 	bl	800074c <setTimer1>
		  time--;
 80001e0:	4b0e      	ldr	r3, [pc, #56]	; (800021c <main+0xd0>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	3b01      	subs	r3, #1
 80001e6:	4a0d      	ldr	r2, [pc, #52]	; (800021c <main+0xd0>)
 80001e8:	6013      	str	r3, [r2, #0]
		  if (time == 0) {
 80001ea:	4b0c      	ldr	r3, [pc, #48]	; (800021c <main+0xd0>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d1ec      	bne.n	80001cc <main+0x80>
			  time = numberOfCurrentTasks + 1;
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <main+0xd4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	3301      	adds	r3, #1
 80001f8:	4a08      	ldr	r2, [pc, #32]	; (800021c <main+0xd0>)
 80001fa:	6013      	str	r3, [r2, #0]
	  SCH_Dispatch_Tasks();
 80001fc:	e7e6      	b.n	80001cc <main+0x80>
 80001fe:	bf00      	nop
 8000200:	2000018c 	.word	0x2000018c
 8000204:	08000a79 	.word	0x08000a79
 8000208:	08000a99 	.word	0x08000a99
 800020c:	08000ab9 	.word	0x08000ab9
 8000210:	08000ad9 	.word	0x08000ad9
 8000214:	08000af9 	.word	0x08000af9
 8000218:	20000098 	.word	0x20000098
 800021c:	20000000 	.word	0x20000000
 8000220:	20000004 	.word	0x20000004

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	; 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f002 f978 	bl	8002528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000252:	2300      	movs	r3, #0
 8000254:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	4618      	mov	r0, r3
 800025c:	f000 ff84 	bl	8001168 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000266:	f000 f915 	bl	8000494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800026e:	2300      	movs	r3, #0
 8000270:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f001 f9f0 	bl	8001668 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800028e:	f000 f901 	bl	8000494 <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	; 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002a2:	f107 0308 	add.w	r3, r7, #8
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b0:	463b      	mov	r3, r7
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002b8:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <MX_TIM2_Init+0x94>)
 80002ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <MX_TIM2_Init+0x94>)
 80002c2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <MX_TIM2_Init+0x94>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80002ce:	4b18      	ldr	r3, [pc, #96]	; (8000330 <MX_TIM2_Init+0x94>)
 80002d0:	220a      	movs	r2, #10
 80002d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <MX_TIM2_Init+0x94>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <MX_TIM2_Init+0x94>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002e0:	4813      	ldr	r0, [pc, #76]	; (8000330 <MX_TIM2_Init+0x94>)
 80002e2:	f001 fb5b 	bl	800199c <HAL_TIM_Base_Init>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002ec:	f000 f8d2 	bl	8000494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	4619      	mov	r1, r3
 80002fc:	480c      	ldr	r0, [pc, #48]	; (8000330 <MX_TIM2_Init+0x94>)
 80002fe:	f001 fcf1 	bl	8001ce4 <HAL_TIM_ConfigClockSource>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000308:	f000 f8c4 	bl	8000494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800030c:	2300      	movs	r3, #0
 800030e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000310:	2300      	movs	r3, #0
 8000312:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000314:	463b      	mov	r3, r7
 8000316:	4619      	mov	r1, r3
 8000318:	4805      	ldr	r0, [pc, #20]	; (8000330 <MX_TIM2_Init+0x94>)
 800031a:	f001 feb9 	bl	8002090 <HAL_TIMEx_MasterConfigSynchronization>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000324:	f000 f8b6 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	3718      	adds	r7, #24
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	2000018c 	.word	0x2000018c

08000334 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 800033a:	4a12      	ldr	r2, [pc, #72]	; (8000384 <MX_USART1_UART_Init+0x50>)
 800033c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 8000340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000344:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 800035a:	220c      	movs	r2, #12
 800035c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_USART1_UART_Init+0x4c>)
 800036c:	f001 fefa 	bl	8002164 <HAL_UART_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000376:	f000 f88d 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000134 	.word	0x20000134
 8000384:	40013800 	.word	0x40013800

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	4b21      	ldr	r3, [pc, #132]	; (8000424 <MX_GPIO_Init+0x9c>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a20      	ldr	r2, [pc, #128]	; (8000424 <MX_GPIO_Init+0x9c>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <MX_GPIO_Init+0x9c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b4:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <MX_GPIO_Init+0x9c>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a1a      	ldr	r2, [pc, #104]	; (8000424 <MX_GPIO_Init+0x9c>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b18      	ldr	r3, [pc, #96]	; (8000424 <MX_GPIO_Init+0x9c>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0308 	and.w	r3, r3, #8
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin|LED_RED3_Pin|LED_RED4_Pin
 80003cc:	2200      	movs	r2, #0
 80003ce:	213e      	movs	r1, #62	; 0x3e
 80003d0:	4815      	ldr	r0, [pc, #84]	; (8000428 <MX_GPIO_Init+0xa0>)
 80003d2:	f000 feb1 	bl	8001138 <HAL_GPIO_WritePin>
                          |LED_RED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a2_Pin|b2_Pin|c2_Pin|b_Pin
 80003d6:	2200      	movs	r2, #0
 80003d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80003dc:	4813      	ldr	r0, [pc, #76]	; (800042c <MX_GPIO_Init+0xa4>)
 80003de:	f000 feab 	bl	8001138 <HAL_GPIO_WritePin>
                          |g_Pin|d2_Pin|e2_Pin|f2_Pin
                          |g2_Pin|EN0_Pin|EN1_Pin|a_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_RED2_Pin LED_RED3_Pin LED_RED4_Pin
                           LED_RED5_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_RED2_Pin|LED_RED3_Pin|LED_RED4_Pin
 80003e2:	233e      	movs	r3, #62	; 0x3e
 80003e4:	60bb      	str	r3, [r7, #8]
                          |LED_RED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e6:	2301      	movs	r3, #1
 80003e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ee:	2302      	movs	r3, #2
 80003f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f2:	f107 0308 	add.w	r3, r7, #8
 80003f6:	4619      	mov	r1, r3
 80003f8:	480b      	ldr	r0, [pc, #44]	; (8000428 <MX_GPIO_Init+0xa0>)
 80003fa:	f000 fd23 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : a2_Pin b2_Pin c2_Pin b_Pin
                           c_Pin d_Pin e_Pin f_Pin
                           g_Pin d2_Pin e2_Pin f2_Pin
                           g2_Pin EN0_Pin EN1_Pin a_Pin */
  GPIO_InitStruct.Pin = a2_Pin|b2_Pin|c2_Pin|b_Pin
 80003fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000402:	60bb      	str	r3, [r7, #8]
                          |c_Pin|d_Pin|e_Pin|f_Pin
                          |g_Pin|d2_Pin|e2_Pin|f2_Pin
                          |g2_Pin|EN0_Pin|EN1_Pin|a_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	2302      	movs	r3, #2
 800040e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000410:	f107 0308 	add.w	r3, r7, #8
 8000414:	4619      	mov	r1, r3
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_GPIO_Init+0xa4>)
 8000418:	f000 fd14 	bl	8000e44 <HAL_GPIO_Init>

}
 800041c:	bf00      	nop
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40021000 	.word	0x40021000
 8000428:	40010800 	.word	0x40010800
 800042c:	40010c00 	.word	0x40010c00

08000430 <get_time>:

/* USER CODE BEGIN 4 */

uint8_t buffer[19];

int get_time() {
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
	return time;
 8000434:	4b02      	ldr	r3, [pc, #8]	; (8000440 <get_time+0x10>)
 8000436:	681b      	ldr	r3, [r3, #0]
}
 8000438:	4618      	mov	r0, r3
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	20000000 	.word	0x20000000

08000444 <HAL_TIM_PeriodElapsedCallback>:
int timeStr = 0; //init
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	timerRun();
 800044c:	f000 f99a 	bl	8000784 <timerRun>

	SCH_Update();
 8000450:	f000 f8cc 	bl	80005ec <SCH_Update>

	timeStr = get_time();
 8000454:	f7ff ffec 	bl	8000430 <get_time>
 8000458:	4603      	mov	r3, r0
 800045a:	4a0a      	ldr	r2, [pc, #40]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800045c:	6013      	str	r3, [r2, #0]
	sprintf((char*)buffer, "Time remaining = %d\r\n", timeStr);
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	461a      	mov	r2, r3
 8000464:	4908      	ldr	r1, [pc, #32]	; (8000488 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000466:	4809      	ldr	r0, [pc, #36]	; (800048c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000468:	f002 f866 	bl	8002538 <siprintf>
	HAL_UART_Transmit(&huart1, &buffer[0], 19, 1000);
 800046c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000470:	2213      	movs	r2, #19
 8000472:	4906      	ldr	r1, [pc, #24]	; (800048c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000474:	4806      	ldr	r0, [pc, #24]	; (8000490 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000476:	f001 fec2 	bl	80021fe <HAL_UART_Transmit>
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000094 	.word	0x20000094
 8000488:	08002dc4 	.word	0x08002dc4
 800048c:	20000178 	.word	0x20000178
 8000490:	20000134 	.word	0x20000134

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049c:	e7fe      	b.n	800049c <Error_Handler+0x8>
	...

080004a0 <SCH_Delete_Task>:
 */

#include "scheduler.h"
#include "main.h"

uint8_t SCH_Delete_Task(uint32_t taskID) {
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	if (taskID < 0 || taskID >= SCH_MAX_TASKS) return 0;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2b04      	cmp	r3, #4
 80004ac:	d901      	bls.n	80004b2 <SCH_Delete_Task+0x12>
 80004ae:	2300      	movs	r3, #0
 80004b0:	e02c      	b.n	800050c <SCH_Delete_Task+0x6c>
	SCH_tasks_G[taskID].pTask = 0x0000;
 80004b2:	4919      	ldr	r1, [pc, #100]	; (8000518 <SCH_Delete_Task+0x78>)
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	4613      	mov	r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	4413      	add	r3, r2
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	440b      	add	r3, r1
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[taskID].Delay = 0;
 80004c4:	4914      	ldr	r1, [pc, #80]	; (8000518 <SCH_Delete_Task+0x78>)
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	4613      	mov	r3, r2
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	4413      	add	r3, r2
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	440b      	add	r3, r1
 80004d2:	3304      	adds	r3, #4
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[taskID].Period =  0;
 80004d8:	490f      	ldr	r1, [pc, #60]	; (8000518 <SCH_Delete_Task+0x78>)
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	4613      	mov	r3, r2
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	4413      	add	r3, r2
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	440b      	add	r3, r1
 80004e6:	3308      	adds	r3, #8
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[taskID].RunMe = 0;
 80004ec:	490a      	ldr	r1, [pc, #40]	; (8000518 <SCH_Delete_Task+0x78>)
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	4613      	mov	r3, r2
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	4413      	add	r3, r2
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	440b      	add	r3, r1
 80004fa:	330c      	adds	r3, #12
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]

	numberOfCurrentTasks--;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <SCH_Delete_Task+0x7c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	3b01      	subs	r3, #1
 8000506:	4a05      	ldr	r2, [pc, #20]	; (800051c <SCH_Delete_Task+0x7c>)
 8000508:	6013      	str	r3, [r2, #0]

	return 1;
 800050a:	2301      	movs	r3, #1
}
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	200000d0 	.word	0x200000d0
 800051c:	20000004 	.word	0x20000004

08000520 <SCH_Init>:

void SCH_Init(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i; i<SCH_MAX_TASKS; i++) {
 8000526:	e006      	b.n	8000536 <SCH_Init+0x16>
		SCH_Delete_Task(i); //to make sure
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff ffb8 	bl	80004a0 <SCH_Delete_Task>
	for (i; i<SCH_MAX_TASKS; i++) {
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	3301      	adds	r3, #1
 8000534:	71fb      	strb	r3, [r7, #7]
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b04      	cmp	r3, #4
 800053a:	d9f5      	bls.n	8000528 <SCH_Init+0x8>
	}
	current_index_task = 0;
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <SCH_Init+0x2c>)
 800053e:	2200      	movs	r2, #0
 8000540:	701a      	strb	r2, [r3, #0]
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	200000cc 	.word	0x200000cc

08000550 <SCH_Add_Task>:

uint32_t SCH_Add_Task( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 8000550:	b480      	push	{r7}
 8000552:	b087      	sub	sp, #28
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
	uint32_t index = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
	while(SCH_tasks_G[index].pTask != 0x0000 && index < SCH_MAX_TASKS){
 8000560:	e002      	b.n	8000568 <SCH_Add_Task+0x18>
		index++;
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
	while(SCH_tasks_G[index].pTask != 0x0000 && index < SCH_MAX_TASKS){
 8000568:	491f      	ldr	r1, [pc, #124]	; (80005e8 <SCH_Add_Task+0x98>)
 800056a:	697a      	ldr	r2, [r7, #20]
 800056c:	4613      	mov	r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	4413      	add	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	440b      	add	r3, r1
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d002      	beq.n	8000582 <SCH_Add_Task+0x32>
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	2b04      	cmp	r3, #4
 8000580:	d9ef      	bls.n	8000562 <SCH_Add_Task+0x12>
	}
	if(index == SCH_MAX_TASKS) return -1;
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d102      	bne.n	800058e <SCH_Add_Task+0x3e>
 8000588:	f04f 33ff 	mov.w	r3, #4294967295
 800058c:	e027      	b.n	80005de <SCH_Add_Task+0x8e>

	SCH_tasks_G[index].pTask = pFunction;
 800058e:	4916      	ldr	r1, [pc, #88]	; (80005e8 <SCH_Add_Task+0x98>)
 8000590:	697a      	ldr	r2, [r7, #20]
 8000592:	4613      	mov	r3, r2
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	4413      	add	r3, r2
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	440b      	add	r3, r1
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Delay = DELAY;
 80005a0:	4911      	ldr	r1, [pc, #68]	; (80005e8 <SCH_Add_Task+0x98>)
 80005a2:	697a      	ldr	r2, [r7, #20]
 80005a4:	4613      	mov	r3, r2
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	4413      	add	r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	440b      	add	r3, r1
 80005ae:	3304      	adds	r3, #4
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Period = PERIOD;
 80005b4:	490c      	ldr	r1, [pc, #48]	; (80005e8 <SCH_Add_Task+0x98>)
 80005b6:	697a      	ldr	r2, [r7, #20]
 80005b8:	4613      	mov	r3, r2
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	4413      	add	r3, r2
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	440b      	add	r3, r1
 80005c2:	3308      	adds	r3, #8
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].RunMe = 0;
 80005c8:	4907      	ldr	r1, [pc, #28]	; (80005e8 <SCH_Add_Task+0x98>)
 80005ca:	697a      	ldr	r2, [r7, #20]
 80005cc:	4613      	mov	r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	440b      	add	r3, r1
 80005d6:	330c      	adds	r3, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
	return index;
 80005dc:	697b      	ldr	r3, [r7, #20]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	371c      	adds	r7, #28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	200000d0 	.word	0x200000d0

080005ec <SCH_Update>:

void SCH_Update(void){
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
	unsigned char index;
	for(index=0; index<SCH_MAX_TASKS; index++){
 80005f2:	2300      	movs	r3, #0
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	e051      	b.n	800069c <SCH_Update+0xb0>
		if(SCH_tasks_G[index].pTask != 0x0000){
 80005f8:	79fa      	ldrb	r2, [r7, #7]
 80005fa:	492d      	ldr	r1, [pc, #180]	; (80006b0 <SCH_Update+0xc4>)
 80005fc:	4613      	mov	r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4413      	add	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	440b      	add	r3, r1
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d044      	beq.n	8000696 <SCH_Update+0xaa>
			if(SCH_tasks_G[index].Delay == 0){
 800060c:	79fa      	ldrb	r2, [r7, #7]
 800060e:	4928      	ldr	r1, [pc, #160]	; (80006b0 <SCH_Update+0xc4>)
 8000610:	4613      	mov	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	4413      	add	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	440b      	add	r3, r1
 800061a:	3304      	adds	r3, #4
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d127      	bne.n	8000672 <SCH_Update+0x86>
				SCH_tasks_G[index].RunMe = 1;
 8000622:	79fa      	ldrb	r2, [r7, #7]
 8000624:	4922      	ldr	r1, [pc, #136]	; (80006b0 <SCH_Update+0xc4>)
 8000626:	4613      	mov	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4413      	add	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	440b      	add	r3, r1
 8000630:	330c      	adds	r3, #12
 8000632:	2201      	movs	r2, #1
 8000634:	701a      	strb	r2, [r3, #0]
				if(SCH_tasks_G[index].Period > 0){
 8000636:	79fa      	ldrb	r2, [r7, #7]
 8000638:	491d      	ldr	r1, [pc, #116]	; (80006b0 <SCH_Update+0xc4>)
 800063a:	4613      	mov	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	440b      	add	r3, r1
 8000644:	3308      	adds	r3, #8
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d024      	beq.n	8000696 <SCH_Update+0xaa>
					SCH_tasks_G[index].Delay = SCH_tasks_G[index].Period;
 800064c:	79f9      	ldrb	r1, [r7, #7]
 800064e:	79fa      	ldrb	r2, [r7, #7]
 8000650:	4817      	ldr	r0, [pc, #92]	; (80006b0 <SCH_Update+0xc4>)
 8000652:	460b      	mov	r3, r1
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	440b      	add	r3, r1
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	4403      	add	r3, r0
 800065c:	3308      	adds	r3, #8
 800065e:	6819      	ldr	r1, [r3, #0]
 8000660:	4813      	ldr	r0, [pc, #76]	; (80006b0 <SCH_Update+0xc4>)
 8000662:	4613      	mov	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4413      	add	r3, r2
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4403      	add	r3, r0
 800066c:	3304      	adds	r3, #4
 800066e:	6019      	str	r1, [r3, #0]
 8000670:	e011      	b.n	8000696 <SCH_Update+0xaa>
				}
			} else {
				SCH_tasks_G[index].Delay--;
 8000672:	79fa      	ldrb	r2, [r7, #7]
 8000674:	490e      	ldr	r1, [pc, #56]	; (80006b0 <SCH_Update+0xc4>)
 8000676:	4613      	mov	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4413      	add	r3, r2
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	440b      	add	r3, r1
 8000680:	3304      	adds	r3, #4
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	1e59      	subs	r1, r3, #1
 8000686:	480a      	ldr	r0, [pc, #40]	; (80006b0 <SCH_Update+0xc4>)
 8000688:	4613      	mov	r3, r2
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	4413      	add	r3, r2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4403      	add	r3, r0
 8000692:	3304      	adds	r3, #4
 8000694:	6019      	str	r1, [r3, #0]
	for(index=0; index<SCH_MAX_TASKS; index++){
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	3301      	adds	r3, #1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b04      	cmp	r3, #4
 80006a0:	d9aa      	bls.n	80005f8 <SCH_Update+0xc>
			}
		}
	}
}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	200000d0 	.word	0x200000d0

080006b4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
	for(int i = 0; i < SCH_MAX_TASKS; i++){
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	e03a      	b.n	8000736 <SCH_Dispatch_Tasks+0x82>
		if(SCH_tasks_G[i].RunMe > 0){
 80006c0:	4921      	ldr	r1, [pc, #132]	; (8000748 <SCH_Dispatch_Tasks+0x94>)
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	4613      	mov	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	440b      	add	r3, r1
 80006ce:	330c      	adds	r3, #12
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d02c      	beq.n	8000730 <SCH_Dispatch_Tasks+0x7c>
			SCH_tasks_G[i].RunMe--;
 80006d6:	491c      	ldr	r1, [pc, #112]	; (8000748 <SCH_Dispatch_Tasks+0x94>)
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	4613      	mov	r3, r2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	440b      	add	r3, r1
 80006e4:	330c      	adds	r3, #12
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	b2d8      	uxtb	r0, r3
 80006ec:	4916      	ldr	r1, [pc, #88]	; (8000748 <SCH_Dispatch_Tasks+0x94>)
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	4613      	mov	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	440b      	add	r3, r1
 80006fa:	330c      	adds	r3, #12
 80006fc:	4602      	mov	r2, r0
 80006fe:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 8000700:	4911      	ldr	r1, [pc, #68]	; (8000748 <SCH_Dispatch_Tasks+0x94>)
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	4613      	mov	r3, r2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	4413      	add	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	440b      	add	r3, r1
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4798      	blx	r3
			//if this is a one-shot task, then remove it from they array
			if (SCH_tasks_G[i].Period == 0) {
 8000712:	490d      	ldr	r1, [pc, #52]	; (8000748 <SCH_Dispatch_Tasks+0x94>)
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	4613      	mov	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	4413      	add	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	440b      	add	r3, r1
 8000720:	3308      	adds	r3, #8
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d103      	bne.n	8000730 <SCH_Dispatch_Tasks+0x7c>
				SCH_Delete_Task(i);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff feb8 	bl	80004a0 <SCH_Delete_Task>
	for(int i = 0; i < SCH_MAX_TASKS; i++){
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b04      	cmp	r3, #4
 800073a:	ddc1      	ble.n	80006c0 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 800073c:	bf00      	nop
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000d0 	.word	0x200000d0

0800074c <setTimer1>:

int timer5_flag = 0;
int timer5_counter = 0;


void setTimer1(int duration) {
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <setTimer1+0x2c>)
 8000758:	fb82 1203 	smull	r1, r2, r2, r3
 800075c:	1092      	asrs	r2, r2, #2
 800075e:	17db      	asrs	r3, r3, #31
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <setTimer1+0x30>)
 8000764:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <setTimer1+0x34>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	66666667 	.word	0x66666667
 800077c:	2000009c 	.word	0x2000009c
 8000780:	20000098 	.word	0x20000098

08000784 <timerRun>:
void setTimer5(int duration) {
	timer5_counter = duration/TICK;
	timer5_flag = 0;
}

void timerRun() {
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <timerRun+0xac>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	dd0b      	ble.n	80007a8 <timerRun+0x24>
		timer1_counter--;
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <timerRun+0xac>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3b01      	subs	r3, #1
 8000796:	4a26      	ldr	r2, [pc, #152]	; (8000830 <timerRun+0xac>)
 8000798:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <timerRun+0xac>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	dc02      	bgt.n	80007a8 <timerRun+0x24>
			timer1_flag = 1;
 80007a2:	4b24      	ldr	r3, [pc, #144]	; (8000834 <timerRun+0xb0>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 80007a8:	4b23      	ldr	r3, [pc, #140]	; (8000838 <timerRun+0xb4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dd0b      	ble.n	80007c8 <timerRun+0x44>
		timer2_counter--;
 80007b0:	4b21      	ldr	r3, [pc, #132]	; (8000838 <timerRun+0xb4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	4a20      	ldr	r2, [pc, #128]	; (8000838 <timerRun+0xb4>)
 80007b8:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 80007ba:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <timerRun+0xb4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	dc02      	bgt.n	80007c8 <timerRun+0x44>
			timer2_flag = 1;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <timerRun+0xb8>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <timerRun+0xbc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dd0b      	ble.n	80007e8 <timerRun+0x64>
		timer3_counter--;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <timerRun+0xbc>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	4a1a      	ldr	r2, [pc, #104]	; (8000840 <timerRun+0xbc>)
 80007d8:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <timerRun+0xbc>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dc02      	bgt.n	80007e8 <timerRun+0x64>
			timer3_flag = 1;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <timerRun+0xc0>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0) {
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <timerRun+0xc4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dd0b      	ble.n	8000808 <timerRun+0x84>
		timer4_counter--;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <timerRun+0xc4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <timerRun+0xc4>)
 80007f8:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <timerRun+0xc4>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	dc02      	bgt.n	8000808 <timerRun+0x84>
			timer4_flag = 1;
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <timerRun+0xc8>)
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0) {
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <timerRun+0xcc>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dd0b      	ble.n	8000828 <timerRun+0xa4>
		timer5_counter--;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <timerRun+0xcc>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	3b01      	subs	r3, #1
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <timerRun+0xcc>)
 8000818:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <timerRun+0xcc>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	dc02      	bgt.n	8000828 <timerRun+0xa4>
			timer5_flag = 1;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <timerRun+0xd0>)
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	2000009c 	.word	0x2000009c
 8000834:	20000098 	.word	0x20000098
 8000838:	200000a4 	.word	0x200000a4
 800083c:	200000a0 	.word	0x200000a0
 8000840:	200000ac 	.word	0x200000ac
 8000844:	200000a8 	.word	0x200000a8
 8000848:	200000b4 	.word	0x200000b4
 800084c:	200000b0 	.word	0x200000b0
 8000850:	200000bc 	.word	0x200000bc
 8000854:	200000b8 	.word	0x200000b8

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <HAL_MspInit+0x5c>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <HAL_MspInit+0x5c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_MspInit+0x5c>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_MspInit+0x5c>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <HAL_MspInit+0x5c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <HAL_MspInit+0x5c>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <HAL_MspInit+0x60>)
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <HAL_MspInit+0x60>)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010000 	.word	0x40010000

080008bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008cc:	d113      	bne.n	80008f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <HAL_TIM_Base_MspInit+0x44>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <HAL_TIM_Base_MspInit+0x44>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_TIM_Base_MspInit+0x44>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	201c      	movs	r0, #28
 80008ec:	f000 fa73 	bl	8000dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008f0:	201c      	movs	r0, #28
 80008f2:	f000 fa8c 	bl	8000e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <HAL_UART_MspInit+0x8c>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d131      	bne.n	8000988 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <HAL_UART_MspInit+0x90>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a1a      	ldr	r2, [pc, #104]	; (8000994 <HAL_UART_MspInit+0x90>)
 800092a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_UART_MspInit+0x90>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_UART_MspInit+0x90>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a14      	ldr	r2, [pc, #80]	; (8000994 <HAL_UART_MspInit+0x90>)
 8000942:	f043 0304 	orr.w	r3, r3, #4
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_UART_MspInit+0x90>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000958:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	4619      	mov	r1, r3
 8000968:	480b      	ldr	r0, [pc, #44]	; (8000998 <HAL_UART_MspInit+0x94>)
 800096a:	f000 fa6b 	bl	8000e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800096e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4619      	mov	r1, r3
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <HAL_UART_MspInit+0x94>)
 8000984:	f000 fa5e 	bl	8000e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000988:	bf00      	nop
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40013800 	.word	0x40013800
 8000994:	40021000 	.word	0x40021000
 8000998:	40010800 	.word	0x40010800

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr

080009de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e2:	f000 f905 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <TIM2_IRQHandler+0x10>)
 80009f2:	f001 f86f 	bl	8001ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000018c 	.word	0x2000018c

08000a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a08:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <_sbrk+0x5c>)
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <_sbrk+0x60>)
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d102      	bne.n	8000a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <_sbrk+0x64>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <_sbrk+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d207      	bcs.n	8000a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a30:	f001 fd50 	bl	80024d4 <__errno>
 8000a34:	4603      	mov	r3, r0
 8000a36:	220c      	movs	r2, #12
 8000a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	e009      	b.n	8000a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <_sbrk+0x64>)
 8000a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a52:	68fb      	ldr	r3, [r7, #12]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20002800 	.word	0x20002800
 8000a60:	00000400 	.word	0x00000400
 8000a64:	200000c0 	.word	0x200000c0
 8000a68:	200001e8 	.word	0x200001e8

08000a6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <task1>:
 */

#include "taskFunctions.h"
#include "stdlib.h"

void task1(){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin|LED_RED3_Pin|LED_RED4_Pin|LED_RED5_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	213c      	movs	r1, #60	; 0x3c
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <task1+0x1c>)
 8000a82:	f000 fb59 	bl	8001138 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4802      	ldr	r0, [pc, #8]	; (8000a94 <task1+0x1c>)
 8000a8c:	f000 fb54 	bl	8001138 <HAL_GPIO_WritePin>
//	HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40010800 	.word	0x40010800

08000a98 <task2>:
void task2(){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_RED3_Pin|LED_RED4_Pin|LED_RED5_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	213a      	movs	r1, #58	; 0x3a
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <task2+0x1c>)
 8000aa2:	f000 fb49 	bl	8001138 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <task2+0x1c>)
 8000aac:	f000 fb44 	bl	8001138 <HAL_GPIO_WritePin>
//	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40010800 	.word	0x40010800

08000ab8 <task3>:
void task3(){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin|LED_RED1_Pin|LED_RED4_Pin|LED_RED5_Pin, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2136      	movs	r1, #54	; 0x36
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <task3+0x1c>)
 8000ac2:	f000 fb39 	bl	8001138 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED3_GPIO_Port, LED_RED3_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2108      	movs	r1, #8
 8000aca:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <task3+0x1c>)
 8000acc:	f000 fb34 	bl	8001138 <HAL_GPIO_WritePin>
//	HAL_GPIO_TogglePin(LED_RED3_GPIO_Port, LED_RED3_Pin);
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40010800 	.word	0x40010800

08000ad8 <task4>:
void task4(){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin|LED_RED3_Pin|LED_RED1_Pin|LED_RED5_Pin, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	212e      	movs	r1, #46	; 0x2e
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <task4+0x1c>)
 8000ae2:	f000 fb29 	bl	8001138 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED4_GPIO_Port, LED_RED4_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2110      	movs	r1, #16
 8000aea:	4802      	ldr	r0, [pc, #8]	; (8000af4 <task4+0x1c>)
 8000aec:	f000 fb24 	bl	8001138 <HAL_GPIO_WritePin>
//	HAL_GPIO_TogglePin(LED_RED4_GPIO_Port, LED_RED4_Pin);
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40010800 	.word	0x40010800

08000af8 <task5>:
void task5(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
//	update_ledbuffer();
	HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin|LED_RED3_Pin|LED_RED4_Pin|LED_RED1_Pin, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	211e      	movs	r1, #30
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <task5+0x1c>)
 8000b02:	f000 fb19 	bl	8001138 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED5_GPIO_Port, LED_RED5_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2120      	movs	r1, #32
 8000b0a:	4802      	ldr	r0, [pc, #8]	; (8000b14 <task5+0x1c>)
 8000b0c:	f000 fb14 	bl	8001138 <HAL_GPIO_WritePin>
//	HAL_GPIO_TogglePin(LED_RED5_GPIO_Port, LED_RED5_Pin);
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40010800 	.word	0x40010800

08000b18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1a:	490d      	ldr	r1, [pc, #52]	; (8000b50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b30:	4c0a      	ldr	r4, [pc, #40]	; (8000b5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b3e:	f7ff ff95 	bl	8000a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f001 fccd 	bl	80024e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b46:	f7ff fb01 	bl	800014c <main>
  bx lr
 8000b4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b50:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000b54:	08002e40 	.word	0x08002e40
  ldr r2, =_sbss
 8000b58:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000b5c:	200001e8 	.word	0x200001e8

08000b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC1_2_IRQHandler>
	...

08000b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x28>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x28>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f923 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fe6a 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f93b 	bl	8000e2a <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 f903 	bl	8000dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000010 	.word	0x20000010
 8000bec:	2000000c 	.word	0x2000000c

08000bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_IncTick+0x1c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x20>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a03      	ldr	r2, [pc, #12]	; (8000c10 <HAL_IncTick+0x20>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000010 	.word	0x20000010
 8000c10:	200001d4 	.word	0x200001d4

08000c14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b02      	ldr	r3, [pc, #8]	; (8000c24 <HAL_GetTick+0x10>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	200001d4 	.word	0x200001d4

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4906      	ldr	r1, [pc, #24]	; (8000cc0 <__NVIC_EnableIRQ+0x34>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f7ff ff90 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff2d 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff42 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ff90 	bl	8000d18 <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff5f 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff35 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ffa2 	bl	8000d7c <SysTick_Config>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b08b      	sub	sp, #44	; 0x2c
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e56:	e148      	b.n	80010ea <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 8137 	bne.w	80010e4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	4aa3      	ldr	r2, [pc, #652]	; (8001108 <HAL_GPIO_Init+0x2c4>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d05e      	beq.n	8000f3e <HAL_GPIO_Init+0xfa>
 8000e80:	4aa1      	ldr	r2, [pc, #644]	; (8001108 <HAL_GPIO_Init+0x2c4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d875      	bhi.n	8000f72 <HAL_GPIO_Init+0x12e>
 8000e86:	4aa1      	ldr	r2, [pc, #644]	; (800110c <HAL_GPIO_Init+0x2c8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d058      	beq.n	8000f3e <HAL_GPIO_Init+0xfa>
 8000e8c:	4a9f      	ldr	r2, [pc, #636]	; (800110c <HAL_GPIO_Init+0x2c8>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d86f      	bhi.n	8000f72 <HAL_GPIO_Init+0x12e>
 8000e92:	4a9f      	ldr	r2, [pc, #636]	; (8001110 <HAL_GPIO_Init+0x2cc>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d052      	beq.n	8000f3e <HAL_GPIO_Init+0xfa>
 8000e98:	4a9d      	ldr	r2, [pc, #628]	; (8001110 <HAL_GPIO_Init+0x2cc>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d869      	bhi.n	8000f72 <HAL_GPIO_Init+0x12e>
 8000e9e:	4a9d      	ldr	r2, [pc, #628]	; (8001114 <HAL_GPIO_Init+0x2d0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d04c      	beq.n	8000f3e <HAL_GPIO_Init+0xfa>
 8000ea4:	4a9b      	ldr	r2, [pc, #620]	; (8001114 <HAL_GPIO_Init+0x2d0>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d863      	bhi.n	8000f72 <HAL_GPIO_Init+0x12e>
 8000eaa:	4a9b      	ldr	r2, [pc, #620]	; (8001118 <HAL_GPIO_Init+0x2d4>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d046      	beq.n	8000f3e <HAL_GPIO_Init+0xfa>
 8000eb0:	4a99      	ldr	r2, [pc, #612]	; (8001118 <HAL_GPIO_Init+0x2d4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d85d      	bhi.n	8000f72 <HAL_GPIO_Init+0x12e>
 8000eb6:	2b12      	cmp	r3, #18
 8000eb8:	d82a      	bhi.n	8000f10 <HAL_GPIO_Init+0xcc>
 8000eba:	2b12      	cmp	r3, #18
 8000ebc:	d859      	bhi.n	8000f72 <HAL_GPIO_Init+0x12e>
 8000ebe:	a201      	add	r2, pc, #4	; (adr r2, 8000ec4 <HAL_GPIO_Init+0x80>)
 8000ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec4:	08000f3f 	.word	0x08000f3f
 8000ec8:	08000f19 	.word	0x08000f19
 8000ecc:	08000f2b 	.word	0x08000f2b
 8000ed0:	08000f6d 	.word	0x08000f6d
 8000ed4:	08000f73 	.word	0x08000f73
 8000ed8:	08000f73 	.word	0x08000f73
 8000edc:	08000f73 	.word	0x08000f73
 8000ee0:	08000f73 	.word	0x08000f73
 8000ee4:	08000f73 	.word	0x08000f73
 8000ee8:	08000f73 	.word	0x08000f73
 8000eec:	08000f73 	.word	0x08000f73
 8000ef0:	08000f73 	.word	0x08000f73
 8000ef4:	08000f73 	.word	0x08000f73
 8000ef8:	08000f73 	.word	0x08000f73
 8000efc:	08000f73 	.word	0x08000f73
 8000f00:	08000f73 	.word	0x08000f73
 8000f04:	08000f73 	.word	0x08000f73
 8000f08:	08000f21 	.word	0x08000f21
 8000f0c:	08000f35 	.word	0x08000f35
 8000f10:	4a82      	ldr	r2, [pc, #520]	; (800111c <HAL_GPIO_Init+0x2d8>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d013      	beq.n	8000f3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f16:	e02c      	b.n	8000f72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	623b      	str	r3, [r7, #32]
          break;
 8000f1e:	e029      	b.n	8000f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	3304      	adds	r3, #4
 8000f26:	623b      	str	r3, [r7, #32]
          break;
 8000f28:	e024      	b.n	8000f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	3308      	adds	r3, #8
 8000f30:	623b      	str	r3, [r7, #32]
          break;
 8000f32:	e01f      	b.n	8000f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	330c      	adds	r3, #12
 8000f3a:	623b      	str	r3, [r7, #32]
          break;
 8000f3c:	e01a      	b.n	8000f74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f46:	2304      	movs	r3, #4
 8000f48:	623b      	str	r3, [r7, #32]
          break;
 8000f4a:	e013      	b.n	8000f74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d105      	bne.n	8000f60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f54:	2308      	movs	r3, #8
 8000f56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	611a      	str	r2, [r3, #16]
          break;
 8000f5e:	e009      	b.n	8000f74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f60:	2308      	movs	r3, #8
 8000f62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69fa      	ldr	r2, [r7, #28]
 8000f68:	615a      	str	r2, [r3, #20]
          break;
 8000f6a:	e003      	b.n	8000f74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
          break;
 8000f70:	e000      	b.n	8000f74 <HAL_GPIO_Init+0x130>
          break;
 8000f72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	2bff      	cmp	r3, #255	; 0xff
 8000f78:	d801      	bhi.n	8000f7e <HAL_GPIO_Init+0x13a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	e001      	b.n	8000f82 <HAL_GPIO_Init+0x13e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3304      	adds	r3, #4
 8000f82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	2bff      	cmp	r3, #255	; 0xff
 8000f88:	d802      	bhi.n	8000f90 <HAL_GPIO_Init+0x14c>
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	e002      	b.n	8000f96 <HAL_GPIO_Init+0x152>
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	3b08      	subs	r3, #8
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	210f      	movs	r1, #15
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	6a39      	ldr	r1, [r7, #32]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8090 	beq.w	80010e4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc4:	4b56      	ldr	r3, [pc, #344]	; (8001120 <HAL_GPIO_Init+0x2dc>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a55      	ldr	r2, [pc, #340]	; (8001120 <HAL_GPIO_Init+0x2dc>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b53      	ldr	r3, [pc, #332]	; (8001120 <HAL_GPIO_Init+0x2dc>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fdc:	4a51      	ldr	r2, [pc, #324]	; (8001124 <HAL_GPIO_Init+0x2e0>)
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a49      	ldr	r2, [pc, #292]	; (8001128 <HAL_GPIO_Init+0x2e4>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d00d      	beq.n	8001024 <HAL_GPIO_Init+0x1e0>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a48      	ldr	r2, [pc, #288]	; (800112c <HAL_GPIO_Init+0x2e8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d007      	beq.n	8001020 <HAL_GPIO_Init+0x1dc>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a47      	ldr	r2, [pc, #284]	; (8001130 <HAL_GPIO_Init+0x2ec>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d101      	bne.n	800101c <HAL_GPIO_Init+0x1d8>
 8001018:	2302      	movs	r3, #2
 800101a:	e004      	b.n	8001026 <HAL_GPIO_Init+0x1e2>
 800101c:	2303      	movs	r3, #3
 800101e:	e002      	b.n	8001026 <HAL_GPIO_Init+0x1e2>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <HAL_GPIO_Init+0x1e2>
 8001024:	2300      	movs	r3, #0
 8001026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001028:	f002 0203 	and.w	r2, r2, #3
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	4093      	lsls	r3, r2
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4313      	orrs	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001036:	493b      	ldr	r1, [pc, #236]	; (8001124 <HAL_GPIO_Init+0x2e0>)
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d006      	beq.n	800105e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001050:	4b38      	ldr	r3, [pc, #224]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4937      	ldr	r1, [pc, #220]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800105e:	4b35      	ldr	r3, [pc, #212]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	43db      	mvns	r3, r3
 8001066:	4933      	ldr	r1, [pc, #204]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 8001068:	4013      	ands	r3, r2
 800106a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d006      	beq.n	8001086 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001078:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	492d      	ldr	r1, [pc, #180]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001086:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	43db      	mvns	r3, r3
 800108e:	4929      	ldr	r1, [pc, #164]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 8001090:	4013      	ands	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d006      	beq.n	80010ae <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	4923      	ldr	r1, [pc, #140]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	608b      	str	r3, [r1, #8]
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	491f      	ldr	r1, [pc, #124]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d006      	beq.n	80010d6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	4919      	ldr	r1, [pc, #100]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	60cb      	str	r3, [r1, #12]
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	43db      	mvns	r3, r3
 80010de:	4915      	ldr	r1, [pc, #84]	; (8001134 <HAL_GPIO_Init+0x2f0>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	3301      	adds	r3, #1
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	fa22 f303 	lsr.w	r3, r2, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f47f aeaf 	bne.w	8000e58 <HAL_GPIO_Init+0x14>
  }
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	372c      	adds	r7, #44	; 0x2c
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	10320000 	.word	0x10320000
 800110c:	10310000 	.word	0x10310000
 8001110:	10220000 	.word	0x10220000
 8001114:	10210000 	.word	0x10210000
 8001118:	10120000 	.word	0x10120000
 800111c:	10110000 	.word	0x10110000
 8001120:	40021000 	.word	0x40021000
 8001124:	40010000 	.word	0x40010000
 8001128:	40010800 	.word	0x40010800
 800112c:	40010c00 	.word	0x40010c00
 8001130:	40011000 	.word	0x40011000
 8001134:	40010400 	.word	0x40010400

08001138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	807b      	strh	r3, [r7, #2]
 8001144:	4613      	mov	r3, r2
 8001146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001148:	787b      	ldrb	r3, [r7, #1]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001154:	e003      	b.n	800115e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001156:	887b      	ldrh	r3, [r7, #2]
 8001158:	041a      	lsls	r2, r3, #16
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	611a      	str	r2, [r3, #16]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e26c      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8087 	beq.w	8001296 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001188:	4b92      	ldr	r3, [pc, #584]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b04      	cmp	r3, #4
 8001192:	d00c      	beq.n	80011ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001194:	4b8f      	ldr	r3, [pc, #572]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b08      	cmp	r3, #8
 800119e:	d112      	bne.n	80011c6 <HAL_RCC_OscConfig+0x5e>
 80011a0:	4b8c      	ldr	r3, [pc, #560]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ac:	d10b      	bne.n	80011c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ae:	4b89      	ldr	r3, [pc, #548]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d06c      	beq.n	8001294 <HAL_RCC_OscConfig+0x12c>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d168      	bne.n	8001294 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e246      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ce:	d106      	bne.n	80011de <HAL_RCC_OscConfig+0x76>
 80011d0:	4b80      	ldr	r3, [pc, #512]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a7f      	ldr	r2, [pc, #508]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	e02e      	b.n	800123c <HAL_RCC_OscConfig+0xd4>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10c      	bne.n	8001200 <HAL_RCC_OscConfig+0x98>
 80011e6:	4b7b      	ldr	r3, [pc, #492]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a7a      	ldr	r2, [pc, #488]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4b78      	ldr	r3, [pc, #480]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a77      	ldr	r2, [pc, #476]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e01d      	b.n	800123c <HAL_RCC_OscConfig+0xd4>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0xbc>
 800120a:	4b72      	ldr	r3, [pc, #456]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a71      	ldr	r2, [pc, #452]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b6f      	ldr	r3, [pc, #444]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a6e      	ldr	r2, [pc, #440]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e00b      	b.n	800123c <HAL_RCC_OscConfig+0xd4>
 8001224:	4b6b      	ldr	r3, [pc, #428]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a6a      	ldr	r2, [pc, #424]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 800122a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b68      	ldr	r3, [pc, #416]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a67      	ldr	r2, [pc, #412]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d013      	beq.n	800126c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fce6 	bl	8000c14 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fce2 	bl	8000c14 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e1fa      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b5d      	ldr	r3, [pc, #372]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0xe4>
 800126a:	e014      	b.n	8001296 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fcd2 	bl	8000c14 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fcce 	bl	8000c14 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e1e6      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x10c>
 8001292:	e000      	b.n	8001296 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d063      	beq.n	800136a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012a2:	4b4c      	ldr	r3, [pc, #304]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00b      	beq.n	80012c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ae:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d11c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x18c>
 80012ba:	4b46      	ldr	r3, [pc, #280]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d116      	bne.n	80012f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_RCC_OscConfig+0x176>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d001      	beq.n	80012de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e1ba      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012de:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4939      	ldr	r1, [pc, #228]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	e03a      	b.n	800136a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d020      	beq.n	800133e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fc:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <HAL_RCC_OscConfig+0x270>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001302:	f7ff fc87 	bl	8000c14 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130a:	f7ff fc83 	bl	8000c14 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e19b      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001328:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4927      	ldr	r1, [pc, #156]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
 800133c:	e015      	b.n	800136a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133e:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fc66 	bl	8000c14 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134c:	f7ff fc62 	bl	8000c14 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e17a      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d03a      	beq.n	80013ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d019      	beq.n	80013b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_RCC_OscConfig+0x274>)
 8001380:	2201      	movs	r2, #1
 8001382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001384:	f7ff fc46 	bl	8000c14 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800138c:	f7ff fc42 	bl	8000c14 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e15a      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013aa:	2001      	movs	r0, #1
 80013ac:	f000 fad8 	bl	8001960 <RCC_Delay>
 80013b0:	e01c      	b.n	80013ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_RCC_OscConfig+0x274>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b8:	f7ff fc2c 	bl	8000c14 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013be:	e00f      	b.n	80013e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff fc28 	bl	8000c14 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d908      	bls.n	80013e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e140      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000
 80013d8:	42420000 	.word	0x42420000
 80013dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e0:	4b9e      	ldr	r3, [pc, #632]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1e9      	bne.n	80013c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 80a6 	beq.w	8001546 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013fe:	4b97      	ldr	r3, [pc, #604]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10d      	bne.n	8001426 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	4b94      	ldr	r3, [pc, #592]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	4a93      	ldr	r2, [pc, #588]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	61d3      	str	r3, [r2, #28]
 8001416:	4b91      	ldr	r3, [pc, #580]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001422:	2301      	movs	r3, #1
 8001424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001426:	4b8e      	ldr	r3, [pc, #568]	; (8001660 <HAL_RCC_OscConfig+0x4f8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142e:	2b00      	cmp	r3, #0
 8001430:	d118      	bne.n	8001464 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001432:	4b8b      	ldr	r3, [pc, #556]	; (8001660 <HAL_RCC_OscConfig+0x4f8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a8a      	ldr	r2, [pc, #552]	; (8001660 <HAL_RCC_OscConfig+0x4f8>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143e:	f7ff fbe9 	bl	8000c14 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001446:	f7ff fbe5 	bl	8000c14 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b64      	cmp	r3, #100	; 0x64
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e0fd      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001458:	4b81      	ldr	r3, [pc, #516]	; (8001660 <HAL_RCC_OscConfig+0x4f8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d106      	bne.n	800147a <HAL_RCC_OscConfig+0x312>
 800146c:	4b7b      	ldr	r3, [pc, #492]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	4a7a      	ldr	r2, [pc, #488]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6213      	str	r3, [r2, #32]
 8001478:	e02d      	b.n	80014d6 <HAL_RCC_OscConfig+0x36e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0x334>
 8001482:	4b76      	ldr	r3, [pc, #472]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4a75      	ldr	r2, [pc, #468]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6213      	str	r3, [r2, #32]
 800148e:	4b73      	ldr	r3, [pc, #460]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a72      	ldr	r2, [pc, #456]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	6213      	str	r3, [r2, #32]
 800149a:	e01c      	b.n	80014d6 <HAL_RCC_OscConfig+0x36e>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b05      	cmp	r3, #5
 80014a2:	d10c      	bne.n	80014be <HAL_RCC_OscConfig+0x356>
 80014a4:	4b6d      	ldr	r3, [pc, #436]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	4a6c      	ldr	r2, [pc, #432]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	6213      	str	r3, [r2, #32]
 80014b0:	4b6a      	ldr	r3, [pc, #424]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4a69      	ldr	r2, [pc, #420]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6213      	str	r3, [r2, #32]
 80014bc:	e00b      	b.n	80014d6 <HAL_RCC_OscConfig+0x36e>
 80014be:	4b67      	ldr	r3, [pc, #412]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	4a66      	ldr	r2, [pc, #408]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	6213      	str	r3, [r2, #32]
 80014ca:	4b64      	ldr	r3, [pc, #400]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a63      	ldr	r2, [pc, #396]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 80014d0:	f023 0304 	bic.w	r3, r3, #4
 80014d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d015      	beq.n	800150a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fb99 	bl	8000c14 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e4:	e00a      	b.n	80014fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e6:	f7ff fb95 	bl	8000c14 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e0ab      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fc:	4b57      	ldr	r3, [pc, #348]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0ee      	beq.n	80014e6 <HAL_RCC_OscConfig+0x37e>
 8001508:	e014      	b.n	8001534 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150a:	f7ff fb83 	bl	8000c14 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001510:	e00a      	b.n	8001528 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7ff fb7f 	bl	8000c14 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001520:	4293      	cmp	r3, r2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e095      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001528:	4b4c      	ldr	r3, [pc, #304]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1ee      	bne.n	8001512 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001534:	7dfb      	ldrb	r3, [r7, #23]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d105      	bne.n	8001546 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800153a:	4b48      	ldr	r3, [pc, #288]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a47      	ldr	r2, [pc, #284]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 8001540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001544:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 8081 	beq.w	8001652 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001550:	4b42      	ldr	r3, [pc, #264]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	2b08      	cmp	r3, #8
 800155a:	d061      	beq.n	8001620 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d146      	bne.n	80015f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001564:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <HAL_RCC_OscConfig+0x4fc>)
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156a:	f7ff fb53 	bl	8000c14 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001572:	f7ff fb4f 	bl	8000c14 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e067      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001584:	4b35      	ldr	r3, [pc, #212]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f0      	bne.n	8001572 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001598:	d108      	bne.n	80015ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800159a:	4b30      	ldr	r3, [pc, #192]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	492d      	ldr	r1, [pc, #180]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a19      	ldr	r1, [r3, #32]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	430b      	orrs	r3, r1
 80015be:	4927      	ldr	r1, [pc, #156]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <HAL_RCC_OscConfig+0x4fc>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff fb23 	bl	8000c14 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d2:	f7ff fb1f 	bl	8000c14 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e037      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x46a>
 80015f0:	e02f      	b.n	8001652 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <HAL_RCC_OscConfig+0x4fc>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fb0c 	bl	8000c14 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff fb08 	bl	8000c14 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e020      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x498>
 800161e:	e018      	b.n	8001652 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e013      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_OscConfig+0x4f4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	429a      	cmp	r2, r3
 800163e:	d106      	bne.n	800164e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164a:	429a      	cmp	r2, r3
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021000 	.word	0x40021000
 8001660:	40007000 	.word	0x40007000
 8001664:	42420060 	.word	0x42420060

08001668 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0d0      	b.n	800181e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800167c:	4b6a      	ldr	r3, [pc, #424]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d910      	bls.n	80016ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b67      	ldr	r3, [pc, #412]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 0207 	bic.w	r2, r3, #7
 8001692:	4965      	ldr	r1, [pc, #404]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169a:	4b63      	ldr	r3, [pc, #396]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0b8      	b.n	800181e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d020      	beq.n	80016fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c4:	4b59      	ldr	r3, [pc, #356]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4a58      	ldr	r2, [pc, #352]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80016ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016dc:	4b53      	ldr	r3, [pc, #332]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a52      	ldr	r2, [pc, #328]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e8:	4b50      	ldr	r3, [pc, #320]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	494d      	ldr	r1, [pc, #308]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d040      	beq.n	8001788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d107      	bne.n	800171e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d115      	bne.n	8001746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e07f      	b.n	800181e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001726:	4b41      	ldr	r3, [pc, #260]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e073      	b.n	800181e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001736:	4b3d      	ldr	r3, [pc, #244]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e06b      	b.n	800181e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001746:	4b39      	ldr	r3, [pc, #228]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f023 0203 	bic.w	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4936      	ldr	r1, [pc, #216]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001758:	f7ff fa5c 	bl	8000c14 <HAL_GetTick>
 800175c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175e:	e00a      	b.n	8001776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001760:	f7ff fa58 	bl	8000c14 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	; 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e053      	b.n	800181e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 020c 	and.w	r2, r3, #12
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	429a      	cmp	r2, r3
 8001786:	d1eb      	bne.n	8001760 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d210      	bcs.n	80017b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 0207 	bic.w	r2, r3, #7
 800179e:	4922      	ldr	r1, [pc, #136]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e032      	b.n	800181e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4916      	ldr	r1, [pc, #88]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d009      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	490e      	ldr	r1, [pc, #56]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017f6:	f000 f821 	bl	800183c <HAL_RCC_GetSysClockFreq>
 80017fa:	4602      	mov	r2, r0
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	490a      	ldr	r1, [pc, #40]	; (8001830 <HAL_RCC_ClockConfig+0x1c8>)
 8001808:	5ccb      	ldrb	r3, [r1, r3]
 800180a:	fa22 f303 	lsr.w	r3, r2, r3
 800180e:	4a09      	ldr	r2, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1cc>)
 8001810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_RCC_ClockConfig+0x1d0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff f9ba 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40022000 	.word	0x40022000
 800182c:	40021000 	.word	0x40021000
 8001830:	08002dec 	.word	0x08002dec
 8001834:	20000008 	.word	0x20000008
 8001838:	2000000c 	.word	0x2000000c

0800183c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800183c:	b490      	push	{r4, r7}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001842:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001844:	1d3c      	adds	r4, r7, #4
 8001846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001848:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800184c:	f240 2301 	movw	r3, #513	; 0x201
 8001850:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b04      	cmp	r3, #4
 8001874:	d002      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x40>
 8001876:	2b08      	cmp	r3, #8
 8001878:	d003      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x46>
 800187a:	e02d      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800187e:	623b      	str	r3, [r7, #32]
      break;
 8001880:	e02d      	b.n	80018de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	0c9b      	lsrs	r3, r3, #18
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800188e:	4413      	add	r3, r2
 8001890:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001894:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	0c5b      	lsrs	r3, r3, #17
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018ae:	4413      	add	r3, r2
 80018b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ba:	fb02 f203 	mul.w	r2, r2, r3
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
 80018c6:	e004      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	623b      	str	r3, [r7, #32]
      break;
 80018d6:	e002      	b.n	80018de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018da:	623b      	str	r3, [r7, #32]
      break;
 80018dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018de:	6a3b      	ldr	r3, [r7, #32]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3728      	adds	r7, #40	; 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc90      	pop	{r4, r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	08002ddc 	.word	0x08002ddc
 80018f0:	40021000 	.word	0x40021000
 80018f4:	007a1200 	.word	0x007a1200
 80018f8:	003d0900 	.word	0x003d0900

080018fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001900:	4b02      	ldr	r3, [pc, #8]	; (800190c <HAL_RCC_GetHCLKFreq+0x10>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	20000008 	.word	0x20000008

08001910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001914:	f7ff fff2 	bl	80018fc <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4903      	ldr	r1, [pc, #12]	; (8001934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	08002dfc 	.word	0x08002dfc

08001938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800193c:	f7ff ffde 	bl	80018fc <HAL_RCC_GetHCLKFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	0adb      	lsrs	r3, r3, #11
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4903      	ldr	r1, [pc, #12]	; (800195c <HAL_RCC_GetPCLK2Freq+0x24>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000
 800195c:	08002dfc 	.word	0x08002dfc

08001960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <RCC_Delay+0x34>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <RCC_Delay+0x38>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0a5b      	lsrs	r3, r3, #9
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800197c:	bf00      	nop
  }
  while (Delay --);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1e5a      	subs	r2, r3, #1
 8001982:	60fa      	str	r2, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f9      	bne.n	800197c <RCC_Delay+0x1c>
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000008 	.word	0x20000008
 8001998:	10624dd3 	.word	0x10624dd3

0800199c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e041      	b.n	8001a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d106      	bne.n	80019c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7fe ff7a 	bl	80008bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3304      	adds	r3, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4610      	mov	r0, r2
 80019dc:	f000 fa6a 	bl	8001eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d001      	beq.n	8001a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e035      	b.n	8001ac0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a16      	ldr	r2, [pc, #88]	; (8001acc <HAL_TIM_Base_Start_IT+0x90>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d009      	beq.n	8001a8a <HAL_TIM_Base_Start_IT+0x4e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7e:	d004      	beq.n	8001a8a <HAL_TIM_Base_Start_IT+0x4e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <HAL_TIM_Base_Start_IT+0x94>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d111      	bne.n	8001aae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b06      	cmp	r3, #6
 8001a9a:	d010      	beq.n	8001abe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aac:	e007      	b.n	8001abe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 0201 	orr.w	r2, r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40012c00 	.word	0x40012c00
 8001ad0:	40000400 	.word	0x40000400

08001ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d122      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d11b      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 0202 	mvn.w	r2, #2
 8001b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f9b1 	bl	8001e7e <HAL_TIM_IC_CaptureCallback>
 8001b1c:	e005      	b.n	8001b2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f9a4 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f9b3 	bl	8001e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d122      	bne.n	8001b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d11b      	bne.n	8001b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0204 	mvn.w	r2, #4
 8001b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f987 	bl	8001e7e <HAL_TIM_IC_CaptureCallback>
 8001b70:	e005      	b.n	8001b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f97a 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f989 	bl	8001e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d122      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d11b      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0208 	mvn.w	r2, #8
 8001ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2204      	movs	r2, #4
 8001bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f95d 	bl	8001e7e <HAL_TIM_IC_CaptureCallback>
 8001bc4:	e005      	b.n	8001bd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f950 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f95f 	bl	8001e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	2b10      	cmp	r3, #16
 8001be4:	d122      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b10      	cmp	r3, #16
 8001bf2:	d11b      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0210 	mvn.w	r2, #16
 8001bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2208      	movs	r2, #8
 8001c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f933 	bl	8001e7e <HAL_TIM_IC_CaptureCallback>
 8001c18:	e005      	b.n	8001c26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f926 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f935 	bl	8001e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d10e      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d107      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0201 	mvn.w	r2, #1
 8001c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7fe fbf6 	bl	8000444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	2b80      	cmp	r3, #128	; 0x80
 8001c64:	d10e      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c70:	2b80      	cmp	r3, #128	; 0x80
 8001c72:	d107      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 fa67 	bl	8002152 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8e:	2b40      	cmp	r3, #64	; 0x40
 8001c90:	d10e      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9c:	2b40      	cmp	r3, #64	; 0x40
 8001c9e:	d107      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f8f9 	bl	8001ea2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	d10e      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b20      	cmp	r3, #32
 8001cca:	d107      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0220 	mvn.w	r2, #32
 8001cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fa32 	bl	8002140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_TIM_ConfigClockSource+0x18>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e0b3      	b.n	8001e64 <HAL_TIM_ConfigClockSource+0x180>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d34:	d03e      	beq.n	8001db4 <HAL_TIM_ConfigClockSource+0xd0>
 8001d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d3a:	f200 8087 	bhi.w	8001e4c <HAL_TIM_ConfigClockSource+0x168>
 8001d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d42:	f000 8085 	beq.w	8001e50 <HAL_TIM_ConfigClockSource+0x16c>
 8001d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d4a:	d87f      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x168>
 8001d4c:	2b70      	cmp	r3, #112	; 0x70
 8001d4e:	d01a      	beq.n	8001d86 <HAL_TIM_ConfigClockSource+0xa2>
 8001d50:	2b70      	cmp	r3, #112	; 0x70
 8001d52:	d87b      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x168>
 8001d54:	2b60      	cmp	r3, #96	; 0x60
 8001d56:	d050      	beq.n	8001dfa <HAL_TIM_ConfigClockSource+0x116>
 8001d58:	2b60      	cmp	r3, #96	; 0x60
 8001d5a:	d877      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x168>
 8001d5c:	2b50      	cmp	r3, #80	; 0x50
 8001d5e:	d03c      	beq.n	8001dda <HAL_TIM_ConfigClockSource+0xf6>
 8001d60:	2b50      	cmp	r3, #80	; 0x50
 8001d62:	d873      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x168>
 8001d64:	2b40      	cmp	r3, #64	; 0x40
 8001d66:	d058      	beq.n	8001e1a <HAL_TIM_ConfigClockSource+0x136>
 8001d68:	2b40      	cmp	r3, #64	; 0x40
 8001d6a:	d86f      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x168>
 8001d6c:	2b30      	cmp	r3, #48	; 0x30
 8001d6e:	d064      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0x156>
 8001d70:	2b30      	cmp	r3, #48	; 0x30
 8001d72:	d86b      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x168>
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	d060      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0x156>
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	d867      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x168>
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d05c      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0x156>
 8001d80:	2b10      	cmp	r3, #16
 8001d82:	d05a      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001d84:	e062      	b.n	8001e4c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6899      	ldr	r1, [r3, #8]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f000 f95c 	bl	8002052 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001da8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	609a      	str	r2, [r3, #8]
      break;
 8001db2:	e04e      	b.n	8001e52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6899      	ldr	r1, [r3, #8]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f000 f945 	bl	8002052 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dd6:	609a      	str	r2, [r3, #8]
      break;
 8001dd8:	e03b      	b.n	8001e52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	6859      	ldr	r1, [r3, #4]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	461a      	mov	r2, r3
 8001de8:	f000 f8bc 	bl	8001f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2150      	movs	r1, #80	; 0x50
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f913 	bl	800201e <TIM_ITRx_SetConfig>
      break;
 8001df8:	e02b      	b.n	8001e52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6859      	ldr	r1, [r3, #4]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	461a      	mov	r2, r3
 8001e08:	f000 f8da 	bl	8001fc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2160      	movs	r1, #96	; 0x60
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f903 	bl	800201e <TIM_ITRx_SetConfig>
      break;
 8001e18:	e01b      	b.n	8001e52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	461a      	mov	r2, r3
 8001e28:	f000 f89c 	bl	8001f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2140      	movs	r1, #64	; 0x40
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f8f3 	bl	800201e <TIM_ITRx_SetConfig>
      break;
 8001e38:	e00b      	b.n	8001e52 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4619      	mov	r1, r3
 8001e44:	4610      	mov	r0, r2
 8001e46:	f000 f8ea 	bl	800201e <TIM_ITRx_SetConfig>
        break;
 8001e4a:	e002      	b.n	8001e52 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001e4c:	bf00      	nop
 8001e4e:	e000      	b.n	8001e52 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001e50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a25      	ldr	r2, [pc, #148]	; (8001f5c <TIM_Base_SetConfig+0xa8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d007      	beq.n	8001edc <TIM_Base_SetConfig+0x28>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed2:	d003      	beq.n	8001edc <TIM_Base_SetConfig+0x28>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a22      	ldr	r2, [pc, #136]	; (8001f60 <TIM_Base_SetConfig+0xac>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d108      	bne.n	8001eee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1a      	ldr	r2, [pc, #104]	; (8001f5c <TIM_Base_SetConfig+0xa8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <TIM_Base_SetConfig+0x52>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efc:	d003      	beq.n	8001f06 <TIM_Base_SetConfig+0x52>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <TIM_Base_SetConfig+0xac>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d108      	bne.n	8001f18 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <TIM_Base_SetConfig+0xa8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d103      	bne.n	8001f4c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	615a      	str	r2, [r3, #20]
}
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	40012c00 	.word	0x40012c00
 8001f60:	40000400 	.word	0x40000400

08001f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	f023 0201 	bic.w	r2, r3, #1
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f023 030a 	bic.w	r3, r3, #10
 8001fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	621a      	str	r2, [r3, #32]
}
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f023 0210 	bic.w	r2, r3, #16
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	031b      	lsls	r3, r3, #12
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001ffc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	621a      	str	r2, [r3, #32]
}
 8002014:	bf00      	nop
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800201e:	b480      	push	{r7}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002034:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	f043 0307 	orr.w	r3, r3, #7
 8002040:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	609a      	str	r2, [r3, #8]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002052:	b480      	push	{r7}
 8002054:	b087      	sub	sp, #28
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800206c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	021a      	lsls	r2, r3, #8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	431a      	orrs	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	4313      	orrs	r3, r2
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	609a      	str	r2, [r3, #8]
}
 8002086:	bf00      	nop
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e041      	b.n	800212c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a14      	ldr	r2, [pc, #80]	; (8002138 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d009      	beq.n	8002100 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f4:	d004      	beq.n	8002100 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a10      	ldr	r2, [pc, #64]	; (800213c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d10c      	bne.n	800211a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002106:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	4313      	orrs	r3, r2
 8002110:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40012c00 	.word	0x40012c00
 800213c:	40000400 	.word	0x40000400

08002140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e03f      	b.n	80021f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fbba 	bl	8000904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2224      	movs	r2, #36	; 0x24
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f905 	bl	80023b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b08a      	sub	sp, #40	; 0x28
 8002202:	af02      	add	r7, sp, #8
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b20      	cmp	r3, #32
 800221c:	d17c      	bne.n	8002318 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <HAL_UART_Transmit+0x2c>
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e075      	b.n	800231a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_UART_Transmit+0x3e>
 8002238:	2302      	movs	r3, #2
 800223a:	e06e      	b.n	800231a <HAL_UART_Transmit+0x11c>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2221      	movs	r2, #33	; 0x21
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002252:	f7fe fcdf 	bl	8000c14 <HAL_GetTick>
 8002256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	88fa      	ldrh	r2, [r7, #6]
 800225c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	88fa      	ldrh	r2, [r7, #6]
 8002262:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800226c:	d108      	bne.n	8002280 <HAL_UART_Transmit+0x82>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d104      	bne.n	8002280 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	e003      	b.n	8002288 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002284:	2300      	movs	r3, #0
 8002286:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002290:	e02a      	b.n	80022e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2200      	movs	r2, #0
 800229a:	2180      	movs	r1, #128	; 0x80
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f840 	bl	8002322 <UART_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e036      	b.n	800231a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10b      	bne.n	80022ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	3302      	adds	r3, #2
 80022c6:	61bb      	str	r3, [r7, #24]
 80022c8:	e007      	b.n	80022da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	3301      	adds	r3, #1
 80022d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1cf      	bne.n	8002292 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2200      	movs	r2, #0
 80022fa:	2140      	movs	r1, #64	; 0x40
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 f810 	bl	8002322 <UART_WaitOnFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e006      	b.n	800231a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	e000      	b.n	800231a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002318:	2302      	movs	r3, #2
  }
}
 800231a:	4618      	mov	r0, r3
 800231c:	3720      	adds	r7, #32
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4613      	mov	r3, r2
 8002330:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002332:	e02c      	b.n	800238e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233a:	d028      	beq.n	800238e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <UART_WaitOnFlagUntilTimeout+0x30>
 8002342:	f7fe fc67 	bl	8000c14 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	429a      	cmp	r2, r3
 8002350:	d21d      	bcs.n	800238e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002360:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0201 	bic.w	r2, r2, #1
 8002370:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e00f      	b.n	80023ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4013      	ands	r3, r2
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	429a      	cmp	r2, r3
 800239c:	bf0c      	ite	eq
 800239e:	2301      	moveq	r3, #1
 80023a0:	2300      	movne	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d0c3      	beq.n	8002334 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023f2:	f023 030c 	bic.w	r3, r3, #12
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	430b      	orrs	r3, r1
 80023fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a2c      	ldr	r2, [pc, #176]	; (80024cc <UART_SetConfig+0x114>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d103      	bne.n	8002428 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002420:	f7ff fa8a 	bl	8001938 <HAL_RCC_GetPCLK2Freq>
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	e002      	b.n	800242e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002428:	f7ff fa72 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 800242c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	009a      	lsls	r2, r3, #2
 8002438:	441a      	add	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <UART_SetConfig+0x118>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	0119      	lsls	r1, r3, #4
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	009a      	lsls	r2, r3, #2
 8002458:	441a      	add	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	fbb2 f2f3 	udiv	r2, r2, r3
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <UART_SetConfig+0x118>)
 8002466:	fba3 0302 	umull	r0, r3, r3, r2
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2064      	movs	r0, #100	; 0x64
 800246e:	fb00 f303 	mul.w	r3, r0, r3
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	3332      	adds	r3, #50	; 0x32
 8002478:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <UART_SetConfig+0x118>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002484:	4419      	add	r1, r3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	009a      	lsls	r2, r3, #2
 8002490:	441a      	add	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	fbb2 f2f3 	udiv	r2, r2, r3
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <UART_SetConfig+0x118>)
 800249e:	fba3 0302 	umull	r0, r3, r3, r2
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2064      	movs	r0, #100	; 0x64
 80024a6:	fb00 f303 	mul.w	r3, r0, r3
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	3332      	adds	r3, #50	; 0x32
 80024b0:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <UART_SetConfig+0x118>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	f003 020f 	and.w	r2, r3, #15
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	440a      	add	r2, r1
 80024c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40013800 	.word	0x40013800
 80024d0:	51eb851f 	.word	0x51eb851f

080024d4 <__errno>:
 80024d4:	4b01      	ldr	r3, [pc, #4]	; (80024dc <__errno+0x8>)
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000014 	.word	0x20000014

080024e0 <__libc_init_array>:
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	2600      	movs	r6, #0
 80024e4:	4d0c      	ldr	r5, [pc, #48]	; (8002518 <__libc_init_array+0x38>)
 80024e6:	4c0d      	ldr	r4, [pc, #52]	; (800251c <__libc_init_array+0x3c>)
 80024e8:	1b64      	subs	r4, r4, r5
 80024ea:	10a4      	asrs	r4, r4, #2
 80024ec:	42a6      	cmp	r6, r4
 80024ee:	d109      	bne.n	8002504 <__libc_init_array+0x24>
 80024f0:	f000 fc5c 	bl	8002dac <_init>
 80024f4:	2600      	movs	r6, #0
 80024f6:	4d0a      	ldr	r5, [pc, #40]	; (8002520 <__libc_init_array+0x40>)
 80024f8:	4c0a      	ldr	r4, [pc, #40]	; (8002524 <__libc_init_array+0x44>)
 80024fa:	1b64      	subs	r4, r4, r5
 80024fc:	10a4      	asrs	r4, r4, #2
 80024fe:	42a6      	cmp	r6, r4
 8002500:	d105      	bne.n	800250e <__libc_init_array+0x2e>
 8002502:	bd70      	pop	{r4, r5, r6, pc}
 8002504:	f855 3b04 	ldr.w	r3, [r5], #4
 8002508:	4798      	blx	r3
 800250a:	3601      	adds	r6, #1
 800250c:	e7ee      	b.n	80024ec <__libc_init_array+0xc>
 800250e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002512:	4798      	blx	r3
 8002514:	3601      	adds	r6, #1
 8002516:	e7f2      	b.n	80024fe <__libc_init_array+0x1e>
 8002518:	08002e38 	.word	0x08002e38
 800251c:	08002e38 	.word	0x08002e38
 8002520:	08002e38 	.word	0x08002e38
 8002524:	08002e3c 	.word	0x08002e3c

08002528 <memset>:
 8002528:	4603      	mov	r3, r0
 800252a:	4402      	add	r2, r0
 800252c:	4293      	cmp	r3, r2
 800252e:	d100      	bne.n	8002532 <memset+0xa>
 8002530:	4770      	bx	lr
 8002532:	f803 1b01 	strb.w	r1, [r3], #1
 8002536:	e7f9      	b.n	800252c <memset+0x4>

08002538 <siprintf>:
 8002538:	b40e      	push	{r1, r2, r3}
 800253a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800253e:	b500      	push	{lr}
 8002540:	b09c      	sub	sp, #112	; 0x70
 8002542:	ab1d      	add	r3, sp, #116	; 0x74
 8002544:	9002      	str	r0, [sp, #8]
 8002546:	9006      	str	r0, [sp, #24]
 8002548:	9107      	str	r1, [sp, #28]
 800254a:	9104      	str	r1, [sp, #16]
 800254c:	4808      	ldr	r0, [pc, #32]	; (8002570 <siprintf+0x38>)
 800254e:	4909      	ldr	r1, [pc, #36]	; (8002574 <siprintf+0x3c>)
 8002550:	f853 2b04 	ldr.w	r2, [r3], #4
 8002554:	9105      	str	r1, [sp, #20]
 8002556:	6800      	ldr	r0, [r0, #0]
 8002558:	a902      	add	r1, sp, #8
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	f000 f868 	bl	8002630 <_svfiprintf_r>
 8002560:	2200      	movs	r2, #0
 8002562:	9b02      	ldr	r3, [sp, #8]
 8002564:	701a      	strb	r2, [r3, #0]
 8002566:	b01c      	add	sp, #112	; 0x70
 8002568:	f85d eb04 	ldr.w	lr, [sp], #4
 800256c:	b003      	add	sp, #12
 800256e:	4770      	bx	lr
 8002570:	20000014 	.word	0x20000014
 8002574:	ffff0208 	.word	0xffff0208

08002578 <__ssputs_r>:
 8002578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800257c:	688e      	ldr	r6, [r1, #8]
 800257e:	4682      	mov	sl, r0
 8002580:	429e      	cmp	r6, r3
 8002582:	460c      	mov	r4, r1
 8002584:	4690      	mov	r8, r2
 8002586:	461f      	mov	r7, r3
 8002588:	d838      	bhi.n	80025fc <__ssputs_r+0x84>
 800258a:	898a      	ldrh	r2, [r1, #12]
 800258c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002590:	d032      	beq.n	80025f8 <__ssputs_r+0x80>
 8002592:	6825      	ldr	r5, [r4, #0]
 8002594:	6909      	ldr	r1, [r1, #16]
 8002596:	3301      	adds	r3, #1
 8002598:	eba5 0901 	sub.w	r9, r5, r1
 800259c:	6965      	ldr	r5, [r4, #20]
 800259e:	444b      	add	r3, r9
 80025a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80025a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80025a8:	106d      	asrs	r5, r5, #1
 80025aa:	429d      	cmp	r5, r3
 80025ac:	bf38      	it	cc
 80025ae:	461d      	movcc	r5, r3
 80025b0:	0553      	lsls	r3, r2, #21
 80025b2:	d531      	bpl.n	8002618 <__ssputs_r+0xa0>
 80025b4:	4629      	mov	r1, r5
 80025b6:	f000 fb53 	bl	8002c60 <_malloc_r>
 80025ba:	4606      	mov	r6, r0
 80025bc:	b950      	cbnz	r0, 80025d4 <__ssputs_r+0x5c>
 80025be:	230c      	movs	r3, #12
 80025c0:	f04f 30ff 	mov.w	r0, #4294967295
 80025c4:	f8ca 3000 	str.w	r3, [sl]
 80025c8:	89a3      	ldrh	r3, [r4, #12]
 80025ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ce:	81a3      	strh	r3, [r4, #12]
 80025d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025d4:	464a      	mov	r2, r9
 80025d6:	6921      	ldr	r1, [r4, #16]
 80025d8:	f000 face 	bl	8002b78 <memcpy>
 80025dc:	89a3      	ldrh	r3, [r4, #12]
 80025de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80025e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e6:	81a3      	strh	r3, [r4, #12]
 80025e8:	6126      	str	r6, [r4, #16]
 80025ea:	444e      	add	r6, r9
 80025ec:	6026      	str	r6, [r4, #0]
 80025ee:	463e      	mov	r6, r7
 80025f0:	6165      	str	r5, [r4, #20]
 80025f2:	eba5 0509 	sub.w	r5, r5, r9
 80025f6:	60a5      	str	r5, [r4, #8]
 80025f8:	42be      	cmp	r6, r7
 80025fa:	d900      	bls.n	80025fe <__ssputs_r+0x86>
 80025fc:	463e      	mov	r6, r7
 80025fe:	4632      	mov	r2, r6
 8002600:	4641      	mov	r1, r8
 8002602:	6820      	ldr	r0, [r4, #0]
 8002604:	f000 fac6 	bl	8002b94 <memmove>
 8002608:	68a3      	ldr	r3, [r4, #8]
 800260a:	6822      	ldr	r2, [r4, #0]
 800260c:	1b9b      	subs	r3, r3, r6
 800260e:	4432      	add	r2, r6
 8002610:	2000      	movs	r0, #0
 8002612:	60a3      	str	r3, [r4, #8]
 8002614:	6022      	str	r2, [r4, #0]
 8002616:	e7db      	b.n	80025d0 <__ssputs_r+0x58>
 8002618:	462a      	mov	r2, r5
 800261a:	f000 fb7b 	bl	8002d14 <_realloc_r>
 800261e:	4606      	mov	r6, r0
 8002620:	2800      	cmp	r0, #0
 8002622:	d1e1      	bne.n	80025e8 <__ssputs_r+0x70>
 8002624:	4650      	mov	r0, sl
 8002626:	6921      	ldr	r1, [r4, #16]
 8002628:	f000 face 	bl	8002bc8 <_free_r>
 800262c:	e7c7      	b.n	80025be <__ssputs_r+0x46>
	...

08002630 <_svfiprintf_r>:
 8002630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002634:	4698      	mov	r8, r3
 8002636:	898b      	ldrh	r3, [r1, #12]
 8002638:	4607      	mov	r7, r0
 800263a:	061b      	lsls	r3, r3, #24
 800263c:	460d      	mov	r5, r1
 800263e:	4614      	mov	r4, r2
 8002640:	b09d      	sub	sp, #116	; 0x74
 8002642:	d50e      	bpl.n	8002662 <_svfiprintf_r+0x32>
 8002644:	690b      	ldr	r3, [r1, #16]
 8002646:	b963      	cbnz	r3, 8002662 <_svfiprintf_r+0x32>
 8002648:	2140      	movs	r1, #64	; 0x40
 800264a:	f000 fb09 	bl	8002c60 <_malloc_r>
 800264e:	6028      	str	r0, [r5, #0]
 8002650:	6128      	str	r0, [r5, #16]
 8002652:	b920      	cbnz	r0, 800265e <_svfiprintf_r+0x2e>
 8002654:	230c      	movs	r3, #12
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	e0d1      	b.n	8002802 <_svfiprintf_r+0x1d2>
 800265e:	2340      	movs	r3, #64	; 0x40
 8002660:	616b      	str	r3, [r5, #20]
 8002662:	2300      	movs	r3, #0
 8002664:	9309      	str	r3, [sp, #36]	; 0x24
 8002666:	2320      	movs	r3, #32
 8002668:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800266c:	2330      	movs	r3, #48	; 0x30
 800266e:	f04f 0901 	mov.w	r9, #1
 8002672:	f8cd 800c 	str.w	r8, [sp, #12]
 8002676:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800281c <_svfiprintf_r+0x1ec>
 800267a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800267e:	4623      	mov	r3, r4
 8002680:	469a      	mov	sl, r3
 8002682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002686:	b10a      	cbz	r2, 800268c <_svfiprintf_r+0x5c>
 8002688:	2a25      	cmp	r2, #37	; 0x25
 800268a:	d1f9      	bne.n	8002680 <_svfiprintf_r+0x50>
 800268c:	ebba 0b04 	subs.w	fp, sl, r4
 8002690:	d00b      	beq.n	80026aa <_svfiprintf_r+0x7a>
 8002692:	465b      	mov	r3, fp
 8002694:	4622      	mov	r2, r4
 8002696:	4629      	mov	r1, r5
 8002698:	4638      	mov	r0, r7
 800269a:	f7ff ff6d 	bl	8002578 <__ssputs_r>
 800269e:	3001      	adds	r0, #1
 80026a0:	f000 80aa 	beq.w	80027f8 <_svfiprintf_r+0x1c8>
 80026a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026a6:	445a      	add	r2, fp
 80026a8:	9209      	str	r2, [sp, #36]	; 0x24
 80026aa:	f89a 3000 	ldrb.w	r3, [sl]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80a2 	beq.w	80027f8 <_svfiprintf_r+0x1c8>
 80026b4:	2300      	movs	r3, #0
 80026b6:	f04f 32ff 	mov.w	r2, #4294967295
 80026ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026be:	f10a 0a01 	add.w	sl, sl, #1
 80026c2:	9304      	str	r3, [sp, #16]
 80026c4:	9307      	str	r3, [sp, #28]
 80026c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026ca:	931a      	str	r3, [sp, #104]	; 0x68
 80026cc:	4654      	mov	r4, sl
 80026ce:	2205      	movs	r2, #5
 80026d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026d4:	4851      	ldr	r0, [pc, #324]	; (800281c <_svfiprintf_r+0x1ec>)
 80026d6:	f000 fa41 	bl	8002b5c <memchr>
 80026da:	9a04      	ldr	r2, [sp, #16]
 80026dc:	b9d8      	cbnz	r0, 8002716 <_svfiprintf_r+0xe6>
 80026de:	06d0      	lsls	r0, r2, #27
 80026e0:	bf44      	itt	mi
 80026e2:	2320      	movmi	r3, #32
 80026e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026e8:	0711      	lsls	r1, r2, #28
 80026ea:	bf44      	itt	mi
 80026ec:	232b      	movmi	r3, #43	; 0x2b
 80026ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026f2:	f89a 3000 	ldrb.w	r3, [sl]
 80026f6:	2b2a      	cmp	r3, #42	; 0x2a
 80026f8:	d015      	beq.n	8002726 <_svfiprintf_r+0xf6>
 80026fa:	4654      	mov	r4, sl
 80026fc:	2000      	movs	r0, #0
 80026fe:	f04f 0c0a 	mov.w	ip, #10
 8002702:	9a07      	ldr	r2, [sp, #28]
 8002704:	4621      	mov	r1, r4
 8002706:	f811 3b01 	ldrb.w	r3, [r1], #1
 800270a:	3b30      	subs	r3, #48	; 0x30
 800270c:	2b09      	cmp	r3, #9
 800270e:	d94e      	bls.n	80027ae <_svfiprintf_r+0x17e>
 8002710:	b1b0      	cbz	r0, 8002740 <_svfiprintf_r+0x110>
 8002712:	9207      	str	r2, [sp, #28]
 8002714:	e014      	b.n	8002740 <_svfiprintf_r+0x110>
 8002716:	eba0 0308 	sub.w	r3, r0, r8
 800271a:	fa09 f303 	lsl.w	r3, r9, r3
 800271e:	4313      	orrs	r3, r2
 8002720:	46a2      	mov	sl, r4
 8002722:	9304      	str	r3, [sp, #16]
 8002724:	e7d2      	b.n	80026cc <_svfiprintf_r+0x9c>
 8002726:	9b03      	ldr	r3, [sp, #12]
 8002728:	1d19      	adds	r1, r3, #4
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	9103      	str	r1, [sp, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	bfbb      	ittet	lt
 8002732:	425b      	neglt	r3, r3
 8002734:	f042 0202 	orrlt.w	r2, r2, #2
 8002738:	9307      	strge	r3, [sp, #28]
 800273a:	9307      	strlt	r3, [sp, #28]
 800273c:	bfb8      	it	lt
 800273e:	9204      	strlt	r2, [sp, #16]
 8002740:	7823      	ldrb	r3, [r4, #0]
 8002742:	2b2e      	cmp	r3, #46	; 0x2e
 8002744:	d10c      	bne.n	8002760 <_svfiprintf_r+0x130>
 8002746:	7863      	ldrb	r3, [r4, #1]
 8002748:	2b2a      	cmp	r3, #42	; 0x2a
 800274a:	d135      	bne.n	80027b8 <_svfiprintf_r+0x188>
 800274c:	9b03      	ldr	r3, [sp, #12]
 800274e:	3402      	adds	r4, #2
 8002750:	1d1a      	adds	r2, r3, #4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	9203      	str	r2, [sp, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	bfb8      	it	lt
 800275a:	f04f 33ff 	movlt.w	r3, #4294967295
 800275e:	9305      	str	r3, [sp, #20]
 8002760:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800282c <_svfiprintf_r+0x1fc>
 8002764:	2203      	movs	r2, #3
 8002766:	4650      	mov	r0, sl
 8002768:	7821      	ldrb	r1, [r4, #0]
 800276a:	f000 f9f7 	bl	8002b5c <memchr>
 800276e:	b140      	cbz	r0, 8002782 <_svfiprintf_r+0x152>
 8002770:	2340      	movs	r3, #64	; 0x40
 8002772:	eba0 000a 	sub.w	r0, r0, sl
 8002776:	fa03 f000 	lsl.w	r0, r3, r0
 800277a:	9b04      	ldr	r3, [sp, #16]
 800277c:	3401      	adds	r4, #1
 800277e:	4303      	orrs	r3, r0
 8002780:	9304      	str	r3, [sp, #16]
 8002782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002786:	2206      	movs	r2, #6
 8002788:	4825      	ldr	r0, [pc, #148]	; (8002820 <_svfiprintf_r+0x1f0>)
 800278a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800278e:	f000 f9e5 	bl	8002b5c <memchr>
 8002792:	2800      	cmp	r0, #0
 8002794:	d038      	beq.n	8002808 <_svfiprintf_r+0x1d8>
 8002796:	4b23      	ldr	r3, [pc, #140]	; (8002824 <_svfiprintf_r+0x1f4>)
 8002798:	bb1b      	cbnz	r3, 80027e2 <_svfiprintf_r+0x1b2>
 800279a:	9b03      	ldr	r3, [sp, #12]
 800279c:	3307      	adds	r3, #7
 800279e:	f023 0307 	bic.w	r3, r3, #7
 80027a2:	3308      	adds	r3, #8
 80027a4:	9303      	str	r3, [sp, #12]
 80027a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027a8:	4433      	add	r3, r6
 80027aa:	9309      	str	r3, [sp, #36]	; 0x24
 80027ac:	e767      	b.n	800267e <_svfiprintf_r+0x4e>
 80027ae:	460c      	mov	r4, r1
 80027b0:	2001      	movs	r0, #1
 80027b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80027b6:	e7a5      	b.n	8002704 <_svfiprintf_r+0xd4>
 80027b8:	2300      	movs	r3, #0
 80027ba:	f04f 0c0a 	mov.w	ip, #10
 80027be:	4619      	mov	r1, r3
 80027c0:	3401      	adds	r4, #1
 80027c2:	9305      	str	r3, [sp, #20]
 80027c4:	4620      	mov	r0, r4
 80027c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027ca:	3a30      	subs	r2, #48	; 0x30
 80027cc:	2a09      	cmp	r2, #9
 80027ce:	d903      	bls.n	80027d8 <_svfiprintf_r+0x1a8>
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0c5      	beq.n	8002760 <_svfiprintf_r+0x130>
 80027d4:	9105      	str	r1, [sp, #20]
 80027d6:	e7c3      	b.n	8002760 <_svfiprintf_r+0x130>
 80027d8:	4604      	mov	r4, r0
 80027da:	2301      	movs	r3, #1
 80027dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80027e0:	e7f0      	b.n	80027c4 <_svfiprintf_r+0x194>
 80027e2:	ab03      	add	r3, sp, #12
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	462a      	mov	r2, r5
 80027e8:	4638      	mov	r0, r7
 80027ea:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <_svfiprintf_r+0x1f8>)
 80027ec:	a904      	add	r1, sp, #16
 80027ee:	f3af 8000 	nop.w
 80027f2:	1c42      	adds	r2, r0, #1
 80027f4:	4606      	mov	r6, r0
 80027f6:	d1d6      	bne.n	80027a6 <_svfiprintf_r+0x176>
 80027f8:	89ab      	ldrh	r3, [r5, #12]
 80027fa:	065b      	lsls	r3, r3, #25
 80027fc:	f53f af2c 	bmi.w	8002658 <_svfiprintf_r+0x28>
 8002800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002802:	b01d      	add	sp, #116	; 0x74
 8002804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002808:	ab03      	add	r3, sp, #12
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	462a      	mov	r2, r5
 800280e:	4638      	mov	r0, r7
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <_svfiprintf_r+0x1f8>)
 8002812:	a904      	add	r1, sp, #16
 8002814:	f000 f87c 	bl	8002910 <_printf_i>
 8002818:	e7eb      	b.n	80027f2 <_svfiprintf_r+0x1c2>
 800281a:	bf00      	nop
 800281c:	08002e04 	.word	0x08002e04
 8002820:	08002e0e 	.word	0x08002e0e
 8002824:	00000000 	.word	0x00000000
 8002828:	08002579 	.word	0x08002579
 800282c:	08002e0a 	.word	0x08002e0a

08002830 <_printf_common>:
 8002830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002834:	4616      	mov	r6, r2
 8002836:	4699      	mov	r9, r3
 8002838:	688a      	ldr	r2, [r1, #8]
 800283a:	690b      	ldr	r3, [r1, #16]
 800283c:	4607      	mov	r7, r0
 800283e:	4293      	cmp	r3, r2
 8002840:	bfb8      	it	lt
 8002842:	4613      	movlt	r3, r2
 8002844:	6033      	str	r3, [r6, #0]
 8002846:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800284a:	460c      	mov	r4, r1
 800284c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002850:	b10a      	cbz	r2, 8002856 <_printf_common+0x26>
 8002852:	3301      	adds	r3, #1
 8002854:	6033      	str	r3, [r6, #0]
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	0699      	lsls	r1, r3, #26
 800285a:	bf42      	ittt	mi
 800285c:	6833      	ldrmi	r3, [r6, #0]
 800285e:	3302      	addmi	r3, #2
 8002860:	6033      	strmi	r3, [r6, #0]
 8002862:	6825      	ldr	r5, [r4, #0]
 8002864:	f015 0506 	ands.w	r5, r5, #6
 8002868:	d106      	bne.n	8002878 <_printf_common+0x48>
 800286a:	f104 0a19 	add.w	sl, r4, #25
 800286e:	68e3      	ldr	r3, [r4, #12]
 8002870:	6832      	ldr	r2, [r6, #0]
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	42ab      	cmp	r3, r5
 8002876:	dc28      	bgt.n	80028ca <_printf_common+0x9a>
 8002878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800287c:	1e13      	subs	r3, r2, #0
 800287e:	6822      	ldr	r2, [r4, #0]
 8002880:	bf18      	it	ne
 8002882:	2301      	movne	r3, #1
 8002884:	0692      	lsls	r2, r2, #26
 8002886:	d42d      	bmi.n	80028e4 <_printf_common+0xb4>
 8002888:	4649      	mov	r1, r9
 800288a:	4638      	mov	r0, r7
 800288c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002890:	47c0      	blx	r8
 8002892:	3001      	adds	r0, #1
 8002894:	d020      	beq.n	80028d8 <_printf_common+0xa8>
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	68e5      	ldr	r5, [r4, #12]
 800289a:	f003 0306 	and.w	r3, r3, #6
 800289e:	2b04      	cmp	r3, #4
 80028a0:	bf18      	it	ne
 80028a2:	2500      	movne	r5, #0
 80028a4:	6832      	ldr	r2, [r6, #0]
 80028a6:	f04f 0600 	mov.w	r6, #0
 80028aa:	68a3      	ldr	r3, [r4, #8]
 80028ac:	bf08      	it	eq
 80028ae:	1aad      	subeq	r5, r5, r2
 80028b0:	6922      	ldr	r2, [r4, #16]
 80028b2:	bf08      	it	eq
 80028b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028b8:	4293      	cmp	r3, r2
 80028ba:	bfc4      	itt	gt
 80028bc:	1a9b      	subgt	r3, r3, r2
 80028be:	18ed      	addgt	r5, r5, r3
 80028c0:	341a      	adds	r4, #26
 80028c2:	42b5      	cmp	r5, r6
 80028c4:	d11a      	bne.n	80028fc <_printf_common+0xcc>
 80028c6:	2000      	movs	r0, #0
 80028c8:	e008      	b.n	80028dc <_printf_common+0xac>
 80028ca:	2301      	movs	r3, #1
 80028cc:	4652      	mov	r2, sl
 80028ce:	4649      	mov	r1, r9
 80028d0:	4638      	mov	r0, r7
 80028d2:	47c0      	blx	r8
 80028d4:	3001      	adds	r0, #1
 80028d6:	d103      	bne.n	80028e0 <_printf_common+0xb0>
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028e0:	3501      	adds	r5, #1
 80028e2:	e7c4      	b.n	800286e <_printf_common+0x3e>
 80028e4:	2030      	movs	r0, #48	; 0x30
 80028e6:	18e1      	adds	r1, r4, r3
 80028e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028f2:	4422      	add	r2, r4
 80028f4:	3302      	adds	r3, #2
 80028f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028fa:	e7c5      	b.n	8002888 <_printf_common+0x58>
 80028fc:	2301      	movs	r3, #1
 80028fe:	4622      	mov	r2, r4
 8002900:	4649      	mov	r1, r9
 8002902:	4638      	mov	r0, r7
 8002904:	47c0      	blx	r8
 8002906:	3001      	adds	r0, #1
 8002908:	d0e6      	beq.n	80028d8 <_printf_common+0xa8>
 800290a:	3601      	adds	r6, #1
 800290c:	e7d9      	b.n	80028c2 <_printf_common+0x92>
	...

08002910 <_printf_i>:
 8002910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002914:	460c      	mov	r4, r1
 8002916:	7e27      	ldrb	r7, [r4, #24]
 8002918:	4691      	mov	r9, r2
 800291a:	2f78      	cmp	r7, #120	; 0x78
 800291c:	4680      	mov	r8, r0
 800291e:	469a      	mov	sl, r3
 8002920:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002926:	d807      	bhi.n	8002938 <_printf_i+0x28>
 8002928:	2f62      	cmp	r7, #98	; 0x62
 800292a:	d80a      	bhi.n	8002942 <_printf_i+0x32>
 800292c:	2f00      	cmp	r7, #0
 800292e:	f000 80d9 	beq.w	8002ae4 <_printf_i+0x1d4>
 8002932:	2f58      	cmp	r7, #88	; 0x58
 8002934:	f000 80a4 	beq.w	8002a80 <_printf_i+0x170>
 8002938:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800293c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002940:	e03a      	b.n	80029b8 <_printf_i+0xa8>
 8002942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002946:	2b15      	cmp	r3, #21
 8002948:	d8f6      	bhi.n	8002938 <_printf_i+0x28>
 800294a:	a001      	add	r0, pc, #4	; (adr r0, 8002950 <_printf_i+0x40>)
 800294c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002950:	080029a9 	.word	0x080029a9
 8002954:	080029bd 	.word	0x080029bd
 8002958:	08002939 	.word	0x08002939
 800295c:	08002939 	.word	0x08002939
 8002960:	08002939 	.word	0x08002939
 8002964:	08002939 	.word	0x08002939
 8002968:	080029bd 	.word	0x080029bd
 800296c:	08002939 	.word	0x08002939
 8002970:	08002939 	.word	0x08002939
 8002974:	08002939 	.word	0x08002939
 8002978:	08002939 	.word	0x08002939
 800297c:	08002acb 	.word	0x08002acb
 8002980:	080029ed 	.word	0x080029ed
 8002984:	08002aad 	.word	0x08002aad
 8002988:	08002939 	.word	0x08002939
 800298c:	08002939 	.word	0x08002939
 8002990:	08002aed 	.word	0x08002aed
 8002994:	08002939 	.word	0x08002939
 8002998:	080029ed 	.word	0x080029ed
 800299c:	08002939 	.word	0x08002939
 80029a0:	08002939 	.word	0x08002939
 80029a4:	08002ab5 	.word	0x08002ab5
 80029a8:	680b      	ldr	r3, [r1, #0]
 80029aa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80029ae:	1d1a      	adds	r2, r3, #4
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	600a      	str	r2, [r1, #0]
 80029b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0a4      	b.n	8002b06 <_printf_i+0x1f6>
 80029bc:	6825      	ldr	r5, [r4, #0]
 80029be:	6808      	ldr	r0, [r1, #0]
 80029c0:	062e      	lsls	r6, r5, #24
 80029c2:	f100 0304 	add.w	r3, r0, #4
 80029c6:	d50a      	bpl.n	80029de <_printf_i+0xce>
 80029c8:	6805      	ldr	r5, [r0, #0]
 80029ca:	600b      	str	r3, [r1, #0]
 80029cc:	2d00      	cmp	r5, #0
 80029ce:	da03      	bge.n	80029d8 <_printf_i+0xc8>
 80029d0:	232d      	movs	r3, #45	; 0x2d
 80029d2:	426d      	negs	r5, r5
 80029d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029d8:	230a      	movs	r3, #10
 80029da:	485e      	ldr	r0, [pc, #376]	; (8002b54 <_printf_i+0x244>)
 80029dc:	e019      	b.n	8002a12 <_printf_i+0x102>
 80029de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80029e2:	6805      	ldr	r5, [r0, #0]
 80029e4:	600b      	str	r3, [r1, #0]
 80029e6:	bf18      	it	ne
 80029e8:	b22d      	sxthne	r5, r5
 80029ea:	e7ef      	b.n	80029cc <_printf_i+0xbc>
 80029ec:	680b      	ldr	r3, [r1, #0]
 80029ee:	6825      	ldr	r5, [r4, #0]
 80029f0:	1d18      	adds	r0, r3, #4
 80029f2:	6008      	str	r0, [r1, #0]
 80029f4:	0628      	lsls	r0, r5, #24
 80029f6:	d501      	bpl.n	80029fc <_printf_i+0xec>
 80029f8:	681d      	ldr	r5, [r3, #0]
 80029fa:	e002      	b.n	8002a02 <_printf_i+0xf2>
 80029fc:	0669      	lsls	r1, r5, #25
 80029fe:	d5fb      	bpl.n	80029f8 <_printf_i+0xe8>
 8002a00:	881d      	ldrh	r5, [r3, #0]
 8002a02:	2f6f      	cmp	r7, #111	; 0x6f
 8002a04:	bf0c      	ite	eq
 8002a06:	2308      	moveq	r3, #8
 8002a08:	230a      	movne	r3, #10
 8002a0a:	4852      	ldr	r0, [pc, #328]	; (8002b54 <_printf_i+0x244>)
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a12:	6866      	ldr	r6, [r4, #4]
 8002a14:	2e00      	cmp	r6, #0
 8002a16:	bfa8      	it	ge
 8002a18:	6821      	ldrge	r1, [r4, #0]
 8002a1a:	60a6      	str	r6, [r4, #8]
 8002a1c:	bfa4      	itt	ge
 8002a1e:	f021 0104 	bicge.w	r1, r1, #4
 8002a22:	6021      	strge	r1, [r4, #0]
 8002a24:	b90d      	cbnz	r5, 8002a2a <_printf_i+0x11a>
 8002a26:	2e00      	cmp	r6, #0
 8002a28:	d04d      	beq.n	8002ac6 <_printf_i+0x1b6>
 8002a2a:	4616      	mov	r6, r2
 8002a2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002a30:	fb03 5711 	mls	r7, r3, r1, r5
 8002a34:	5dc7      	ldrb	r7, [r0, r7]
 8002a36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002a3a:	462f      	mov	r7, r5
 8002a3c:	42bb      	cmp	r3, r7
 8002a3e:	460d      	mov	r5, r1
 8002a40:	d9f4      	bls.n	8002a2c <_printf_i+0x11c>
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d10b      	bne.n	8002a5e <_printf_i+0x14e>
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	07df      	lsls	r7, r3, #31
 8002a4a:	d508      	bpl.n	8002a5e <_printf_i+0x14e>
 8002a4c:	6923      	ldr	r3, [r4, #16]
 8002a4e:	6861      	ldr	r1, [r4, #4]
 8002a50:	4299      	cmp	r1, r3
 8002a52:	bfde      	ittt	le
 8002a54:	2330      	movle	r3, #48	; 0x30
 8002a56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002a5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002a5e:	1b92      	subs	r2, r2, r6
 8002a60:	6122      	str	r2, [r4, #16]
 8002a62:	464b      	mov	r3, r9
 8002a64:	4621      	mov	r1, r4
 8002a66:	4640      	mov	r0, r8
 8002a68:	f8cd a000 	str.w	sl, [sp]
 8002a6c:	aa03      	add	r2, sp, #12
 8002a6e:	f7ff fedf 	bl	8002830 <_printf_common>
 8002a72:	3001      	adds	r0, #1
 8002a74:	d14c      	bne.n	8002b10 <_printf_i+0x200>
 8002a76:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7a:	b004      	add	sp, #16
 8002a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a80:	4834      	ldr	r0, [pc, #208]	; (8002b54 <_printf_i+0x244>)
 8002a82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a86:	680e      	ldr	r6, [r1, #0]
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002a8e:	061f      	lsls	r7, r3, #24
 8002a90:	600e      	str	r6, [r1, #0]
 8002a92:	d514      	bpl.n	8002abe <_printf_i+0x1ae>
 8002a94:	07d9      	lsls	r1, r3, #31
 8002a96:	bf44      	itt	mi
 8002a98:	f043 0320 	orrmi.w	r3, r3, #32
 8002a9c:	6023      	strmi	r3, [r4, #0]
 8002a9e:	b91d      	cbnz	r5, 8002aa8 <_printf_i+0x198>
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	f023 0320 	bic.w	r3, r3, #32
 8002aa6:	6023      	str	r3, [r4, #0]
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	e7af      	b.n	8002a0c <_printf_i+0xfc>
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	f043 0320 	orr.w	r3, r3, #32
 8002ab2:	6023      	str	r3, [r4, #0]
 8002ab4:	2378      	movs	r3, #120	; 0x78
 8002ab6:	4828      	ldr	r0, [pc, #160]	; (8002b58 <_printf_i+0x248>)
 8002ab8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002abc:	e7e3      	b.n	8002a86 <_printf_i+0x176>
 8002abe:	065e      	lsls	r6, r3, #25
 8002ac0:	bf48      	it	mi
 8002ac2:	b2ad      	uxthmi	r5, r5
 8002ac4:	e7e6      	b.n	8002a94 <_printf_i+0x184>
 8002ac6:	4616      	mov	r6, r2
 8002ac8:	e7bb      	b.n	8002a42 <_printf_i+0x132>
 8002aca:	680b      	ldr	r3, [r1, #0]
 8002acc:	6826      	ldr	r6, [r4, #0]
 8002ace:	1d1d      	adds	r5, r3, #4
 8002ad0:	6960      	ldr	r0, [r4, #20]
 8002ad2:	600d      	str	r5, [r1, #0]
 8002ad4:	0635      	lsls	r5, r6, #24
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	d501      	bpl.n	8002ade <_printf_i+0x1ce>
 8002ada:	6018      	str	r0, [r3, #0]
 8002adc:	e002      	b.n	8002ae4 <_printf_i+0x1d4>
 8002ade:	0671      	lsls	r1, r6, #25
 8002ae0:	d5fb      	bpl.n	8002ada <_printf_i+0x1ca>
 8002ae2:	8018      	strh	r0, [r3, #0]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	4616      	mov	r6, r2
 8002ae8:	6123      	str	r3, [r4, #16]
 8002aea:	e7ba      	b.n	8002a62 <_printf_i+0x152>
 8002aec:	680b      	ldr	r3, [r1, #0]
 8002aee:	1d1a      	adds	r2, r3, #4
 8002af0:	600a      	str	r2, [r1, #0]
 8002af2:	681e      	ldr	r6, [r3, #0]
 8002af4:	2100      	movs	r1, #0
 8002af6:	4630      	mov	r0, r6
 8002af8:	6862      	ldr	r2, [r4, #4]
 8002afa:	f000 f82f 	bl	8002b5c <memchr>
 8002afe:	b108      	cbz	r0, 8002b04 <_printf_i+0x1f4>
 8002b00:	1b80      	subs	r0, r0, r6
 8002b02:	6060      	str	r0, [r4, #4]
 8002b04:	6863      	ldr	r3, [r4, #4]
 8002b06:	6123      	str	r3, [r4, #16]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b0e:	e7a8      	b.n	8002a62 <_printf_i+0x152>
 8002b10:	4632      	mov	r2, r6
 8002b12:	4649      	mov	r1, r9
 8002b14:	4640      	mov	r0, r8
 8002b16:	6923      	ldr	r3, [r4, #16]
 8002b18:	47d0      	blx	sl
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	d0ab      	beq.n	8002a76 <_printf_i+0x166>
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	079b      	lsls	r3, r3, #30
 8002b22:	d413      	bmi.n	8002b4c <_printf_i+0x23c>
 8002b24:	68e0      	ldr	r0, [r4, #12]
 8002b26:	9b03      	ldr	r3, [sp, #12]
 8002b28:	4298      	cmp	r0, r3
 8002b2a:	bfb8      	it	lt
 8002b2c:	4618      	movlt	r0, r3
 8002b2e:	e7a4      	b.n	8002a7a <_printf_i+0x16a>
 8002b30:	2301      	movs	r3, #1
 8002b32:	4632      	mov	r2, r6
 8002b34:	4649      	mov	r1, r9
 8002b36:	4640      	mov	r0, r8
 8002b38:	47d0      	blx	sl
 8002b3a:	3001      	adds	r0, #1
 8002b3c:	d09b      	beq.n	8002a76 <_printf_i+0x166>
 8002b3e:	3501      	adds	r5, #1
 8002b40:	68e3      	ldr	r3, [r4, #12]
 8002b42:	9903      	ldr	r1, [sp, #12]
 8002b44:	1a5b      	subs	r3, r3, r1
 8002b46:	42ab      	cmp	r3, r5
 8002b48:	dcf2      	bgt.n	8002b30 <_printf_i+0x220>
 8002b4a:	e7eb      	b.n	8002b24 <_printf_i+0x214>
 8002b4c:	2500      	movs	r5, #0
 8002b4e:	f104 0619 	add.w	r6, r4, #25
 8002b52:	e7f5      	b.n	8002b40 <_printf_i+0x230>
 8002b54:	08002e15 	.word	0x08002e15
 8002b58:	08002e26 	.word	0x08002e26

08002b5c <memchr>:
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	b510      	push	{r4, lr}
 8002b60:	b2c9      	uxtb	r1, r1
 8002b62:	4402      	add	r2, r0
 8002b64:	4293      	cmp	r3, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	d101      	bne.n	8002b6e <memchr+0x12>
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	e003      	b.n	8002b76 <memchr+0x1a>
 8002b6e:	7804      	ldrb	r4, [r0, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	428c      	cmp	r4, r1
 8002b74:	d1f6      	bne.n	8002b64 <memchr+0x8>
 8002b76:	bd10      	pop	{r4, pc}

08002b78 <memcpy>:
 8002b78:	440a      	add	r2, r1
 8002b7a:	4291      	cmp	r1, r2
 8002b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b80:	d100      	bne.n	8002b84 <memcpy+0xc>
 8002b82:	4770      	bx	lr
 8002b84:	b510      	push	{r4, lr}
 8002b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b8a:	4291      	cmp	r1, r2
 8002b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b90:	d1f9      	bne.n	8002b86 <memcpy+0xe>
 8002b92:	bd10      	pop	{r4, pc}

08002b94 <memmove>:
 8002b94:	4288      	cmp	r0, r1
 8002b96:	b510      	push	{r4, lr}
 8002b98:	eb01 0402 	add.w	r4, r1, r2
 8002b9c:	d902      	bls.n	8002ba4 <memmove+0x10>
 8002b9e:	4284      	cmp	r4, r0
 8002ba0:	4623      	mov	r3, r4
 8002ba2:	d807      	bhi.n	8002bb4 <memmove+0x20>
 8002ba4:	1e43      	subs	r3, r0, #1
 8002ba6:	42a1      	cmp	r1, r4
 8002ba8:	d008      	beq.n	8002bbc <memmove+0x28>
 8002baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002bb2:	e7f8      	b.n	8002ba6 <memmove+0x12>
 8002bb4:	4601      	mov	r1, r0
 8002bb6:	4402      	add	r2, r0
 8002bb8:	428a      	cmp	r2, r1
 8002bba:	d100      	bne.n	8002bbe <memmove+0x2a>
 8002bbc:	bd10      	pop	{r4, pc}
 8002bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002bc6:	e7f7      	b.n	8002bb8 <memmove+0x24>

08002bc8 <_free_r>:
 8002bc8:	b538      	push	{r3, r4, r5, lr}
 8002bca:	4605      	mov	r5, r0
 8002bcc:	2900      	cmp	r1, #0
 8002bce:	d043      	beq.n	8002c58 <_free_r+0x90>
 8002bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bd4:	1f0c      	subs	r4, r1, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	bfb8      	it	lt
 8002bda:	18e4      	addlt	r4, r4, r3
 8002bdc:	f000 f8d0 	bl	8002d80 <__malloc_lock>
 8002be0:	4a1e      	ldr	r2, [pc, #120]	; (8002c5c <_free_r+0x94>)
 8002be2:	6813      	ldr	r3, [r2, #0]
 8002be4:	4610      	mov	r0, r2
 8002be6:	b933      	cbnz	r3, 8002bf6 <_free_r+0x2e>
 8002be8:	6063      	str	r3, [r4, #4]
 8002bea:	6014      	str	r4, [r2, #0]
 8002bec:	4628      	mov	r0, r5
 8002bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bf2:	f000 b8cb 	b.w	8002d8c <__malloc_unlock>
 8002bf6:	42a3      	cmp	r3, r4
 8002bf8:	d90a      	bls.n	8002c10 <_free_r+0x48>
 8002bfa:	6821      	ldr	r1, [r4, #0]
 8002bfc:	1862      	adds	r2, r4, r1
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	bf01      	itttt	eq
 8002c02:	681a      	ldreq	r2, [r3, #0]
 8002c04:	685b      	ldreq	r3, [r3, #4]
 8002c06:	1852      	addeq	r2, r2, r1
 8002c08:	6022      	streq	r2, [r4, #0]
 8002c0a:	6063      	str	r3, [r4, #4]
 8002c0c:	6004      	str	r4, [r0, #0]
 8002c0e:	e7ed      	b.n	8002bec <_free_r+0x24>
 8002c10:	461a      	mov	r2, r3
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	b10b      	cbz	r3, 8002c1a <_free_r+0x52>
 8002c16:	42a3      	cmp	r3, r4
 8002c18:	d9fa      	bls.n	8002c10 <_free_r+0x48>
 8002c1a:	6811      	ldr	r1, [r2, #0]
 8002c1c:	1850      	adds	r0, r2, r1
 8002c1e:	42a0      	cmp	r0, r4
 8002c20:	d10b      	bne.n	8002c3a <_free_r+0x72>
 8002c22:	6820      	ldr	r0, [r4, #0]
 8002c24:	4401      	add	r1, r0
 8002c26:	1850      	adds	r0, r2, r1
 8002c28:	4283      	cmp	r3, r0
 8002c2a:	6011      	str	r1, [r2, #0]
 8002c2c:	d1de      	bne.n	8002bec <_free_r+0x24>
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4401      	add	r1, r0
 8002c34:	6011      	str	r1, [r2, #0]
 8002c36:	6053      	str	r3, [r2, #4]
 8002c38:	e7d8      	b.n	8002bec <_free_r+0x24>
 8002c3a:	d902      	bls.n	8002c42 <_free_r+0x7a>
 8002c3c:	230c      	movs	r3, #12
 8002c3e:	602b      	str	r3, [r5, #0]
 8002c40:	e7d4      	b.n	8002bec <_free_r+0x24>
 8002c42:	6820      	ldr	r0, [r4, #0]
 8002c44:	1821      	adds	r1, r4, r0
 8002c46:	428b      	cmp	r3, r1
 8002c48:	bf01      	itttt	eq
 8002c4a:	6819      	ldreq	r1, [r3, #0]
 8002c4c:	685b      	ldreq	r3, [r3, #4]
 8002c4e:	1809      	addeq	r1, r1, r0
 8002c50:	6021      	streq	r1, [r4, #0]
 8002c52:	6063      	str	r3, [r4, #4]
 8002c54:	6054      	str	r4, [r2, #4]
 8002c56:	e7c9      	b.n	8002bec <_free_r+0x24>
 8002c58:	bd38      	pop	{r3, r4, r5, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200000c4 	.word	0x200000c4

08002c60 <_malloc_r>:
 8002c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c62:	1ccd      	adds	r5, r1, #3
 8002c64:	f025 0503 	bic.w	r5, r5, #3
 8002c68:	3508      	adds	r5, #8
 8002c6a:	2d0c      	cmp	r5, #12
 8002c6c:	bf38      	it	cc
 8002c6e:	250c      	movcc	r5, #12
 8002c70:	2d00      	cmp	r5, #0
 8002c72:	4606      	mov	r6, r0
 8002c74:	db01      	blt.n	8002c7a <_malloc_r+0x1a>
 8002c76:	42a9      	cmp	r1, r5
 8002c78:	d903      	bls.n	8002c82 <_malloc_r+0x22>
 8002c7a:	230c      	movs	r3, #12
 8002c7c:	6033      	str	r3, [r6, #0]
 8002c7e:	2000      	movs	r0, #0
 8002c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c82:	f000 f87d 	bl	8002d80 <__malloc_lock>
 8002c86:	4921      	ldr	r1, [pc, #132]	; (8002d0c <_malloc_r+0xac>)
 8002c88:	680a      	ldr	r2, [r1, #0]
 8002c8a:	4614      	mov	r4, r2
 8002c8c:	b99c      	cbnz	r4, 8002cb6 <_malloc_r+0x56>
 8002c8e:	4f20      	ldr	r7, [pc, #128]	; (8002d10 <_malloc_r+0xb0>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	b923      	cbnz	r3, 8002c9e <_malloc_r+0x3e>
 8002c94:	4621      	mov	r1, r4
 8002c96:	4630      	mov	r0, r6
 8002c98:	f000 f862 	bl	8002d60 <_sbrk_r>
 8002c9c:	6038      	str	r0, [r7, #0]
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	4630      	mov	r0, r6
 8002ca2:	f000 f85d 	bl	8002d60 <_sbrk_r>
 8002ca6:	1c43      	adds	r3, r0, #1
 8002ca8:	d123      	bne.n	8002cf2 <_malloc_r+0x92>
 8002caa:	230c      	movs	r3, #12
 8002cac:	4630      	mov	r0, r6
 8002cae:	6033      	str	r3, [r6, #0]
 8002cb0:	f000 f86c 	bl	8002d8c <__malloc_unlock>
 8002cb4:	e7e3      	b.n	8002c7e <_malloc_r+0x1e>
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	1b5b      	subs	r3, r3, r5
 8002cba:	d417      	bmi.n	8002cec <_malloc_r+0x8c>
 8002cbc:	2b0b      	cmp	r3, #11
 8002cbe:	d903      	bls.n	8002cc8 <_malloc_r+0x68>
 8002cc0:	6023      	str	r3, [r4, #0]
 8002cc2:	441c      	add	r4, r3
 8002cc4:	6025      	str	r5, [r4, #0]
 8002cc6:	e004      	b.n	8002cd2 <_malloc_r+0x72>
 8002cc8:	6863      	ldr	r3, [r4, #4]
 8002cca:	42a2      	cmp	r2, r4
 8002ccc:	bf0c      	ite	eq
 8002cce:	600b      	streq	r3, [r1, #0]
 8002cd0:	6053      	strne	r3, [r2, #4]
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	f000 f85a 	bl	8002d8c <__malloc_unlock>
 8002cd8:	f104 000b 	add.w	r0, r4, #11
 8002cdc:	1d23      	adds	r3, r4, #4
 8002cde:	f020 0007 	bic.w	r0, r0, #7
 8002ce2:	1ac2      	subs	r2, r0, r3
 8002ce4:	d0cc      	beq.n	8002c80 <_malloc_r+0x20>
 8002ce6:	1a1b      	subs	r3, r3, r0
 8002ce8:	50a3      	str	r3, [r4, r2]
 8002cea:	e7c9      	b.n	8002c80 <_malloc_r+0x20>
 8002cec:	4622      	mov	r2, r4
 8002cee:	6864      	ldr	r4, [r4, #4]
 8002cf0:	e7cc      	b.n	8002c8c <_malloc_r+0x2c>
 8002cf2:	1cc4      	adds	r4, r0, #3
 8002cf4:	f024 0403 	bic.w	r4, r4, #3
 8002cf8:	42a0      	cmp	r0, r4
 8002cfa:	d0e3      	beq.n	8002cc4 <_malloc_r+0x64>
 8002cfc:	1a21      	subs	r1, r4, r0
 8002cfe:	4630      	mov	r0, r6
 8002d00:	f000 f82e 	bl	8002d60 <_sbrk_r>
 8002d04:	3001      	adds	r0, #1
 8002d06:	d1dd      	bne.n	8002cc4 <_malloc_r+0x64>
 8002d08:	e7cf      	b.n	8002caa <_malloc_r+0x4a>
 8002d0a:	bf00      	nop
 8002d0c:	200000c4 	.word	0x200000c4
 8002d10:	200000c8 	.word	0x200000c8

08002d14 <_realloc_r>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	4607      	mov	r7, r0
 8002d18:	4614      	mov	r4, r2
 8002d1a:	460e      	mov	r6, r1
 8002d1c:	b921      	cbnz	r1, 8002d28 <_realloc_r+0x14>
 8002d1e:	4611      	mov	r1, r2
 8002d20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002d24:	f7ff bf9c 	b.w	8002c60 <_malloc_r>
 8002d28:	b922      	cbnz	r2, 8002d34 <_realloc_r+0x20>
 8002d2a:	f7ff ff4d 	bl	8002bc8 <_free_r>
 8002d2e:	4625      	mov	r5, r4
 8002d30:	4628      	mov	r0, r5
 8002d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d34:	f000 f830 	bl	8002d98 <_malloc_usable_size_r>
 8002d38:	42a0      	cmp	r0, r4
 8002d3a:	d20f      	bcs.n	8002d5c <_realloc_r+0x48>
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	4638      	mov	r0, r7
 8002d40:	f7ff ff8e 	bl	8002c60 <_malloc_r>
 8002d44:	4605      	mov	r5, r0
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d0f2      	beq.n	8002d30 <_realloc_r+0x1c>
 8002d4a:	4631      	mov	r1, r6
 8002d4c:	4622      	mov	r2, r4
 8002d4e:	f7ff ff13 	bl	8002b78 <memcpy>
 8002d52:	4631      	mov	r1, r6
 8002d54:	4638      	mov	r0, r7
 8002d56:	f7ff ff37 	bl	8002bc8 <_free_r>
 8002d5a:	e7e9      	b.n	8002d30 <_realloc_r+0x1c>
 8002d5c:	4635      	mov	r5, r6
 8002d5e:	e7e7      	b.n	8002d30 <_realloc_r+0x1c>

08002d60 <_sbrk_r>:
 8002d60:	b538      	push	{r3, r4, r5, lr}
 8002d62:	2300      	movs	r3, #0
 8002d64:	4d05      	ldr	r5, [pc, #20]	; (8002d7c <_sbrk_r+0x1c>)
 8002d66:	4604      	mov	r4, r0
 8002d68:	4608      	mov	r0, r1
 8002d6a:	602b      	str	r3, [r5, #0]
 8002d6c:	f7fd fe48 	bl	8000a00 <_sbrk>
 8002d70:	1c43      	adds	r3, r0, #1
 8002d72:	d102      	bne.n	8002d7a <_sbrk_r+0x1a>
 8002d74:	682b      	ldr	r3, [r5, #0]
 8002d76:	b103      	cbz	r3, 8002d7a <_sbrk_r+0x1a>
 8002d78:	6023      	str	r3, [r4, #0]
 8002d7a:	bd38      	pop	{r3, r4, r5, pc}
 8002d7c:	200001d8 	.word	0x200001d8

08002d80 <__malloc_lock>:
 8002d80:	4801      	ldr	r0, [pc, #4]	; (8002d88 <__malloc_lock+0x8>)
 8002d82:	f000 b811 	b.w	8002da8 <__retarget_lock_acquire_recursive>
 8002d86:	bf00      	nop
 8002d88:	200001e0 	.word	0x200001e0

08002d8c <__malloc_unlock>:
 8002d8c:	4801      	ldr	r0, [pc, #4]	; (8002d94 <__malloc_unlock+0x8>)
 8002d8e:	f000 b80c 	b.w	8002daa <__retarget_lock_release_recursive>
 8002d92:	bf00      	nop
 8002d94:	200001e0 	.word	0x200001e0

08002d98 <_malloc_usable_size_r>:
 8002d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d9c:	1f18      	subs	r0, r3, #4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	bfbc      	itt	lt
 8002da2:	580b      	ldrlt	r3, [r1, r0]
 8002da4:	18c0      	addlt	r0, r0, r3
 8002da6:	4770      	bx	lr

08002da8 <__retarget_lock_acquire_recursive>:
 8002da8:	4770      	bx	lr

08002daa <__retarget_lock_release_recursive>:
 8002daa:	4770      	bx	lr

08002dac <_init>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	bf00      	nop
 8002db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db2:	bc08      	pop	{r3}
 8002db4:	469e      	mov	lr, r3
 8002db6:	4770      	bx	lr

08002db8 <_fini>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	bf00      	nop
 8002dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dbe:	bc08      	pop	{r3}
 8002dc0:	469e      	mov	lr, r3
 8002dc2:	4770      	bx	lr
